//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CLVS.Dal.Company
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompanyDBEntities : DbContext
    {
        public CompanyDBEntities()
            : base("name=CompanyDBEntities")
        {
        }
        public CompanyDBEntities(string sConnectionString)
            : base(sConnectionString)
        {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AAC1> AAC1 { get; set; }
        public virtual DbSet<AACP> AACPs { get; set; }
        public virtual DbSet<AAC> AACS { get; set; }
        public virtual DbSet<AACT> AACTs { get; set; }
        public virtual DbSet<AAD1> AAD1 { get; set; }
        public virtual DbSet<AADM> AADMs { get; set; }
        public virtual DbSet<AADP> AADPs { get; set; }
        public virtual DbSet<AADT> AADTs { get; set; }
        public virtual DbSet<ABAT> ABATs { get; set; }
        public virtual DbSet<ABFC> ABFCs { get; set; }
        public virtual DbSet<ABIN> ABINs { get; set; }
        public virtual DbSet<ABO1> ABO1 { get; set; }
        public virtual DbSet<ABOC> ABOCs { get; set; }
        public virtual DbSet<ABOE> ABOEs { get; set; }
        public virtual DbSet<ABP1> ABP1 { get; set; }
        public virtual DbSet<ABP2> ABP2 { get; set; }
        public virtual DbSet<ABPL> ABPLs { get; set; }
        public virtual DbSet<ABSL> ABSLs { get; set; }
        public virtual DbSet<ABT1> ABT1 { get; set; }
        public virtual DbSet<ABTC> ABTCs { get; set; }
        public virtual DbSet<ABTN> ABTNs { get; set; }
        public virtual DbSet<ABTW> ABTWs { get; set; }
        public virtual DbSet<ACD1> ACD1 { get; set; }
        public virtual DbSet<ACD2> ACD2 { get; set; }
        public virtual DbSet<ACD3> ACD3 { get; set; }
        public virtual DbSet<ACFP> ACFPs { get; set; }
        public virtual DbSet<ACH1> ACH1 { get; set; }
        public virtual DbSet<ACHO> ACHOes { get; set; }
        public virtual DbSet<ACP1> ACP1 { get; set; }
        public virtual DbSet<ACP2> ACP2 { get; set; }
        public virtual DbSet<ACP3> ACP3 { get; set; }
        public virtual DbSet<ACPN> ACPNs { get; set; }
        public virtual DbSet<ACPR> ACPRs { get; set; }
        public virtual DbSet<ACQ1> ACQ1 { get; set; }
        public virtual DbSet<ACQ2> ACQ2 { get; set; }
        public virtual DbSet<ACQ3> ACQ3 { get; set; }
        public virtual DbSet<ACR1> ACR1 { get; set; }
        public virtual DbSet<ACR2> ACR2 { get; set; }
        public virtual DbSet<ACR3> ACR3 { get; set; }
        public virtual DbSet<ACR4> ACR4 { get; set; }
        public virtual DbSet<ACR5> ACR5 { get; set; }
        public virtual DbSet<ACR7> ACR7 { get; set; }
        public virtual DbSet<ACRB> ACRBs { get; set; }
        public virtual DbSet<ACRC> ACRCs { get; set; }
        public virtual DbSet<ACRD> ACRDs { get; set; }
        public virtual DbSet<ACS1> ACS1 { get; set; }
        public virtual DbSet<ADG1> ADG1 { get; set; }
        public virtual DbSet<ADM1> ADM1 { get; set; }
        public virtual DbSet<ADM2> ADM2 { get; set; }
        public virtual DbSet<ADMC> ADMCs { get; set; }
        public virtual DbSet<ADNF> ADNFs { get; set; }
        public virtual DbSet<ADO1> ADO1 { get; set; }
        public virtual DbSet<ADO10> ADO10 { get; set; }
        public virtual DbSet<ADO11> ADO11 { get; set; }
        public virtual DbSet<ADO12> ADO12 { get; set; }
        public virtual DbSet<ADO13> ADO13 { get; set; }
        public virtual DbSet<ADO14> ADO14 { get; set; }
        public virtual DbSet<ADO15> ADO15 { get; set; }
        public virtual DbSet<ADO16> ADO16 { get; set; }
        public virtual DbSet<ADO17> ADO17 { get; set; }
        public virtual DbSet<ADO18> ADO18 { get; set; }
        public virtual DbSet<ADO19> ADO19 { get; set; }
        public virtual DbSet<ADO2> ADO2 { get; set; }
        public virtual DbSet<ADO20> ADO20 { get; set; }
        public virtual DbSet<ADO3> ADO3 { get; set; }
        public virtual DbSet<ADO4> ADO4 { get; set; }
        public virtual DbSet<ADO5> ADO5 { get; set; }
        public virtual DbSet<ADO6> ADO6 { get; set; }
        public virtual DbSet<ADO7> ADO7 { get; set; }
        public virtual DbSet<ADO8> ADO8 { get; set; }
        public virtual DbSet<ADO9> ADO9 { get; set; }
        public virtual DbSet<ADOC> ADOCs { get; set; }
        public virtual DbSet<ADP1> ADP1 { get; set; }
        public virtual DbSet<ADPA> ADPAs { get; set; }
        public virtual DbSet<ADS1> ADS1 { get; set; }
        public virtual DbSet<ADT1> ADT1 { get; set; }
        public virtual DbSet<ADTP> ADTPs { get; set; }
        public virtual DbSet<AEC1> AEC1 { get; set; }
        public virtual DbSet<AEC2> AEC2 { get; set; }
        public virtual DbSet<AEC3> AEC3 { get; set; }
        public virtual DbSet<AECM> AECMs { get; set; }
        public virtual DbSet<AEDG> AEDGs { get; set; }
        public virtual DbSet<AEXD> AEXDs { get; set; }
        public virtual DbSet<AFA1> AFA1 { get; set; }
        public virtual DbSet<AFA2> AFA2 { get; set; }
        public virtual DbSet<AFAD> AFADs { get; set; }
        public virtual DbSet<AFM1> AFM1 { get; set; }
        public virtual DbSet<AFML> AFMLs { get; set; }
        public virtual DbSet<AFPR> AFPRs { get; set; }
        public virtual DbSet<AGAR> AGARs { get; set; }
        public virtual DbSet<AHE1> AHE1 { get; set; }
        public virtual DbSet<AHE2> AHE2 { get; set; }
        public virtual DbSet<AHE3> AHE3 { get; set; }
        public virtual DbSet<AHE4> AHE4 { get; set; }
        public virtual DbSet<AHE6> AHE6 { get; set; }
        public virtual DbSet<AHE7> AHE7 { get; set; }
        public virtual DbSet<AHEM> AHEMs { get; set; }
        public virtual DbSet<AIGW> AIGWs { get; set; }
        public virtual DbSet<AIN1> AIN1 { get; set; }
        public virtual DbSet<AIN2> AIN2 { get; set; }
        public virtual DbSet<AIN3> AIN3 { get; set; }
        public virtual DbSet<AINC> AINCs { get; set; }
        public virtual DbSet<AINF> AINFs { get; set; }
        public virtual DbSet<AIN> AINS { get; set; }
        public virtual DbSet<AIQI> AIQIs { get; set; }
        public virtual DbSet<AIQR> AIQRs { get; set; }
        public virtual DbSet<AIT1> AIT1 { get; set; }
        public virtual DbSet<AIT11> AIT11 { get; set; }
        public virtual DbSet<AIT13> AIT13 { get; set; }
        public virtual DbSet<AIT2> AIT2 { get; set; }
        public virtual DbSet<AIT3> AIT3 { get; set; }
        public virtual DbSet<AIT5> AIT5 { get; set; }
        public virtual DbSet<AIT6> AIT6 { get; set; }
        public virtual DbSet<AIT7> AIT7 { get; set; }
        public virtual DbSet<AIT8> AIT8 { get; set; }
        public virtual DbSet<AIT9> AIT9 { get; set; }
        public virtual DbSet<AITB> AITBs { get; set; }
        public virtual DbSet<AITM> AITMs { get; set; }
        public virtual DbSet<AITT> AITTs { get; set; }
        public virtual DbSet<AITW> AITWs { get; set; }
        public virtual DbSet<AJD1> AJD1 { get; set; }
        public virtual DbSet<AJD2> AJD2 { get; set; }
        public virtual DbSet<AJDT> AJDTs { get; set; }
        public virtual DbSet<AKL1> AKL1 { get; set; }
        public virtual DbSet<AKL2> AKL2 { get; set; }
        public virtual DbSet<ALR1> ALR1 { get; set; }
        public virtual DbSet<ALR2> ALR2 { get; set; }
        public virtual DbSet<ALR3> ALR3 { get; set; }
        public virtual DbSet<ALT1> ALT1 { get; set; }
        public virtual DbSet<AMD1> AMD1 { get; set; }
        public virtual DbSet<AMDR> AMDRs { get; set; }
        public virtual DbSet<AMDR1> AMDR1 { get; set; }
        public virtual DbSet<AMGP> AMGPs { get; set; }
        public virtual DbSet<AMR1> AMR1 { get; set; }
        public virtual DbSet<AMR2> AMR2 { get; set; }
        public virtual DbSet<AMR3> AMR3 { get; set; }
        public virtual DbSet<AMRV> AMRVs { get; set; }
        public virtual DbSet<ANCM> ANCMs { get; set; }
        public virtual DbSet<AOA1> AOA1 { get; set; }
        public virtual DbSet<AOA2> AOA2 { get; set; }
        public virtual DbSet<AOA3> AOA3 { get; set; }
        public virtual DbSet<AOA4> AOA4 { get; set; }
        public virtual DbSet<AOAT> AOATs { get; set; }
        public virtual DbSet<AOB1> AOB1 { get; set; }
        public virtual DbSet<AOC1> AOC1 { get; set; }
        public virtual DbSet<AOCR> AOCRs { get; set; }
        public virtual DbSet<AOPR> AOPRs { get; set; }
        public virtual DbSet<APJ1> APJ1 { get; set; }
        public virtual DbSet<APJ2> APJ2 { get; set; }
        public virtual DbSet<APJT> APJTs { get; set; }
        public virtual DbSet<APKL> APKLs { get; set; }
        public virtual DbSet<APLN> APLNs { get; set; }
        public virtual DbSet<APRC> APRCs { get; set; }
        public virtual DbSet<APRJ> APRJs { get; set; }
        public virtual DbSet<AQI1> AQI1 { get; set; }
        public virtual DbSet<AQI2> AQI2 { get; set; }
        public virtual DbSet<AQR1> AQR1 { get; set; }
        public virtual DbSet<AQR2> AQR2 { get; set; }
        public virtual DbSet<AQR3> AQR3 { get; set; }
        public virtual DbSet<ARC1> ARC1 { get; set; }
        public virtual DbSet<ARC2> ARC2 { get; set; }
        public virtual DbSet<ARC3> ARC3 { get; set; }
        public virtual DbSet<ARC4> ARC4 { get; set; }
        public virtual DbSet<ARC5> ARC5 { get; set; }
        public virtual DbSet<ARC6> ARC6 { get; set; }
        public virtual DbSet<ARC7> ARC7 { get; set; }
        public virtual DbSet<ARC8> ARC8 { get; set; }
        public virtual DbSet<ARCT> ARCTs { get; set; }
        public virtual DbSet<ARI1> ARI1 { get; set; }
        public virtual DbSet<ASC1> ASC1 { get; set; }
        public virtual DbSet<ASC2> ASC2 { get; set; }
        public virtual DbSet<ASC3> ASC3 { get; set; }
        public virtual DbSet<ASC4> ASC4 { get; set; }
        public virtual DbSet<ASC5> ASC5 { get; set; }
        public virtual DbSet<ASCL> ASCLs { get; set; }
        public virtual DbSet<ASGP> ASGPs { get; set; }
        public virtual DbSet<ASP1> ASP1 { get; set; }
        public virtual DbSet<ASP2> ASP2 { get; set; }
        public virtual DbSet<ASPP> ASPPs { get; set; }
        public virtual DbSet<ASRN> ASRNs { get; set; }
        public virtual DbSet<AST1> AST1 { get; set; }
        public virtual DbSet<ASTC> ASTCs { get; set; }
        public virtual DbSet<ASTT> ASTTs { get; set; }
        public virtual DbSet<ATC1> ATC1 { get; set; }
        public virtual DbSet<ATHL> ATHLs { get; set; }
        public virtual DbSet<ATSC> ATSCs { get; set; }
        public virtual DbSet<ATT1> ATT1 { get; set; }
        public virtual DbSet<ATX1> ATX1 { get; set; }
        public virtual DbSet<ATX2> ATX2 { get; set; }
        public virtual DbSet<ATXI> ATXIs { get; set; }
        public virtual DbSet<AUG1> AUG1 { get; set; }
        public virtual DbSet<AUGP> AUGPs { get; set; }
        public virtual DbSet<AUOM> AUOMs { get; set; }
        public virtual DbSet<AUSR> AUSRs { get; set; }
        public virtual DbSet<AVT1> AVT1 { get; set; }
        public virtual DbSet<AVTG> AVTGs { get; set; }
        public virtual DbSet<AWEX> AWEXes { get; set; }
        public virtual DbSet<AWFQ> AWFQs { get; set; }
        public virtual DbSet<AWH1> AWH1 { get; set; }
        public virtual DbSet<AWH2> AWH2 { get; set; }
        public virtual DbSet<AWH3> AWH3 { get; set; }
        public virtual DbSet<AWH> AWHS { get; set; }
        public virtual DbSet<AWHT> AWHTs { get; set; }
        public virtual DbSet<AWL1> AWL1 { get; set; }
        public virtual DbSet<AWL2> AWL2 { get; set; }
        public virtual DbSet<AWL3> AWL3 { get; set; }
        public virtual DbSet<AWL4> AWL4 { get; set; }
        public virtual DbSet<AWL5> AWL5 { get; set; }
        public virtual DbSet<AWL> AWLS { get; set; }
        public virtual DbSet<AWMG> AWMGs { get; set; }
        public virtual DbSet<AWO1> AWO1 { get; set; }
        public virtual DbSet<AWO2> AWO2 { get; set; }
        public virtual DbSet<AWOR> AWORs { get; set; }
        public virtual DbSet<AWT> AWTS { get; set; }
        public virtual DbSet<BGT1> BGT1 { get; set; }
        public virtual DbSet<BGT2> BGT2 { get; set; }
        public virtual DbSet<BGT3> BGT3 { get; set; }
        public virtual DbSet<BNK1> BNK1 { get; set; }
        public virtual DbSet<BNK2> BNK2 { get; set; }
        public virtual DbSet<BOC1> BOC1 { get; set; }
        public virtual DbSet<BOE1> BOE1 { get; set; }
        public virtual DbSet<BOT1> BOT1 { get; set; }
        public virtual DbSet<BOX1> BOX1 { get; set; }
        public virtual DbSet<BOX2> BOX2 { get; set; }
        public virtual DbSet<BOX3> BOX3 { get; set; }
        public virtual DbSet<BOX4> BOX4 { get; set; }
        public virtual DbSet<BPL1> BPL1 { get; set; }
        public virtual DbSet<BPL2> BPL2 { get; set; }
        public virtual DbSet<BTC1> BTC1 { get; set; }
        public virtual DbSet<BTF1> BTF1 { get; set; }
        public virtual DbSet<BTF2> BTF2 { get; set; }
        public virtual DbSet<CASE> Cases { get; set; }
        public virtual DbSet<CASE1> CASE1 { get; set; }
        public virtual DbSet<CCAL> CCALs { get; set; }
        public virtual DbSet<CCFG> CCFGs { get; set; }
        public virtual DbSet<CCPD> CCPDs { get; set; }
        public virtual DbSet<CCS1> CCS1 { get; set; }
        public virtual DbSet<CDC1> CDC1 { get; set; }
        public virtual DbSet<CDIC> CDICs { get; set; }
        public virtual DbSet<CDPM> CDPMs { get; set; }
        public virtual DbSet<CDRO> CDROes { get; set; }
        public virtual DbSet<CDRU> CDRUs { get; set; }
        public virtual DbSet<CFH1> CFH1 { get; set; }
        public virtual DbSet<CFN1> CFN1 { get; set; }
        public virtual DbSet<CFU> CFUS { get; set; }
        public virtual DbSet<CHD1> CHD1 { get; set; }
        public virtual DbSet<CHEN> CHENs { get; set; }
        public virtual DbSet<CHFL> CHFLs { get; set; }
        public virtual DbSet<CHO1> CHO1 { get; set; }
        public virtual DbSet<CHO2> CHO2 { get; set; }
        public virtual DbSet<CIF1> CIF1 { get; set; }
        public virtual DbSet<CIN1> CIN1 { get; set; }
        public virtual DbSet<CIN10> CIN10 { get; set; }
        public virtual DbSet<CIN12> CIN12 { get; set; }
        public virtual DbSet<CIN13> CIN13 { get; set; }
        public virtual DbSet<CIN17> CIN17 { get; set; }
        public virtual DbSet<CIN18> CIN18 { get; set; }
        public virtual DbSet<CIN19> CIN19 { get; set; }
        public virtual DbSet<CIN2> CIN2 { get; set; }
        public virtual DbSet<CIN20> CIN20 { get; set; }
        public virtual DbSet<CIN3> CIN3 { get; set; }
        public virtual DbSet<CIN4> CIN4 { get; set; }
        public virtual DbSet<CIN5> CIN5 { get; set; }
        public virtual DbSet<CIN6> CIN6 { get; set; }
        public virtual DbSet<CIN7> CIN7 { get; set; }
        public virtual DbSet<CIN8> CIN8 { get; set; }
        public virtual DbSet<CIN9> CIN9 { get; set; }
        public virtual DbSet<CINF> CINFs { get; set; }
        public virtual DbSet<CIVI> CIVIs { get; set; }
        public virtual DbSet<CPI1> CPI1 { get; set; }
        public virtual DbSet<CPI10> CPI10 { get; set; }
        public virtual DbSet<CPI11> CPI11 { get; set; }
        public virtual DbSet<CPI12> CPI12 { get; set; }
        public virtual DbSet<CPI13> CPI13 { get; set; }
        public virtual DbSet<CPI14> CPI14 { get; set; }
        public virtual DbSet<CPI15> CPI15 { get; set; }
        public virtual DbSet<CPI16> CPI16 { get; set; }
        public virtual DbSet<CPI17> CPI17 { get; set; }
        public virtual DbSet<CPI18> CPI18 { get; set; }
        public virtual DbSet<CPI19> CPI19 { get; set; }
        public virtual DbSet<CPI2> CPI2 { get; set; }
        public virtual DbSet<CPI20> CPI20 { get; set; }
        public virtual DbSet<CPI3> CPI3 { get; set; }
        public virtual DbSet<CPI4> CPI4 { get; set; }
        public virtual DbSet<CPI5> CPI5 { get; set; }
        public virtual DbSet<CPI6> CPI6 { get; set; }
        public virtual DbSet<CPI7> CPI7 { get; set; }
        public virtual DbSet<CPI8> CPI8 { get; set; }
        public virtual DbSet<CPI9> CPI9 { get; set; }
        public virtual DbSet<CPL1> CPL1 { get; set; }
        public virtual DbSet<CPN1> CPN1 { get; set; }
        public virtual DbSet<CPN2> CPN2 { get; set; }
        public virtual DbSet<CPN3> CPN3 { get; set; }
        public virtual DbSet<CPRF> CPRFs { get; set; }
        public virtual DbSet<CPT1> CPT1 { get; set; }
        public virtual DbSet<CPV1> CPV1 { get; set; }
        public virtual DbSet<CPV10> CPV10 { get; set; }
        public virtual DbSet<CPV11> CPV11 { get; set; }
        public virtual DbSet<CPV12> CPV12 { get; set; }
        public virtual DbSet<CPV13> CPV13 { get; set; }
        public virtual DbSet<CPV14> CPV14 { get; set; }
        public virtual DbSet<CPV15> CPV15 { get; set; }
        public virtual DbSet<CPV16> CPV16 { get; set; }
        public virtual DbSet<CPV17> CPV17 { get; set; }
        public virtual DbSet<CPV18> CPV18 { get; set; }
        public virtual DbSet<CPV19> CPV19 { get; set; }
        public virtual DbSet<CPV2> CPV2 { get; set; }
        public virtual DbSet<CPV20> CPV20 { get; set; }
        public virtual DbSet<CPV3> CPV3 { get; set; }
        public virtual DbSet<CPV4> CPV4 { get; set; }
        public virtual DbSet<CPV5> CPV5 { get; set; }
        public virtual DbSet<CPV6> CPV6 { get; set; }
        public virtual DbSet<CPV7> CPV7 { get; set; }
        public virtual DbSet<CPV8> CPV8 { get; set; }
        public virtual DbSet<CPV9> CPV9 { get; set; }
        public virtual DbSet<CRD1> CRD1 { get; set; }
        public virtual DbSet<CRD2> CRD2 { get; set; }
        public virtual DbSet<CRD3> CRD3 { get; set; }
        public virtual DbSet<CRD4> CRD4 { get; set; }
        public virtual DbSet<CRD5> CRD5 { get; set; }
        public virtual DbSet<CRD6> CRD6 { get; set; }
        public virtual DbSet<CRD7> CRD7 { get; set; }
        public virtual DbSet<CRD8> CRD8 { get; set; }
        public virtual DbSet<CRD9> CRD9 { get; set; }
        public virtual DbSet<CSH> CSHS { get; set; }
        public virtual DbSet<CSI1> CSI1 { get; set; }
        public virtual DbSet<CSI10> CSI10 { get; set; }
        public virtual DbSet<CSI11> CSI11 { get; set; }
        public virtual DbSet<CSI12> CSI12 { get; set; }
        public virtual DbSet<CSI13> CSI13 { get; set; }
        public virtual DbSet<CSI14> CSI14 { get; set; }
        public virtual DbSet<CSI15> CSI15 { get; set; }
        public virtual DbSet<CSI16> CSI16 { get; set; }
        public virtual DbSet<CSI17> CSI17 { get; set; }
        public virtual DbSet<CSI18> CSI18 { get; set; }
        public virtual DbSet<CSI19> CSI19 { get; set; }
        public virtual DbSet<CSI2> CSI2 { get; set; }
        public virtual DbSet<CSI20> CSI20 { get; set; }
        public virtual DbSet<CSI3> CSI3 { get; set; }
        public virtual DbSet<CSI4> CSI4 { get; set; }
        public virtual DbSet<CSI5> CSI5 { get; set; }
        public virtual DbSet<CSI6> CSI6 { get; set; }
        public virtual DbSet<CSI7> CSI7 { get; set; }
        public virtual DbSet<CSI8> CSI8 { get; set; }
        public virtual DbSet<CSI9> CSI9 { get; set; }
        public virtual DbSet<CSN1> CSN1 { get; set; }
        public virtual DbSet<CSPI> CSPIs { get; set; }
        public virtual DbSet<CSTN> CSTNs { get; set; }
        public virtual DbSet<CSV1> CSV1 { get; set; }
        public virtual DbSet<CSV10> CSV10 { get; set; }
        public virtual DbSet<CSV11> CSV11 { get; set; }
        public virtual DbSet<CSV12> CSV12 { get; set; }
        public virtual DbSet<CSV13> CSV13 { get; set; }
        public virtual DbSet<CSV14> CSV14 { get; set; }
        public virtual DbSet<CSV15> CSV15 { get; set; }
        public virtual DbSet<CSV16> CSV16 { get; set; }
        public virtual DbSet<CSV17> CSV17 { get; set; }
        public virtual DbSet<CSV18> CSV18 { get; set; }
        public virtual DbSet<CSV19> CSV19 { get; set; }
        public virtual DbSet<CSV2> CSV2 { get; set; }
        public virtual DbSet<CSV20> CSV20 { get; set; }
        public virtual DbSet<CSV3> CSV3 { get; set; }
        public virtual DbSet<CSV4> CSV4 { get; set; }
        public virtual DbSet<CSV5> CSV5 { get; set; }
        public virtual DbSet<CSV6> CSV6 { get; set; }
        public virtual DbSet<CSV7> CSV7 { get; set; }
        public virtual DbSet<CSV8> CSV8 { get; set; }
        public virtual DbSet<CSV9> CSV9 { get; set; }
        public virtual DbSet<CTBR> CTBRs { get; set; }
        public virtual DbSet<CTG1> CTG1 { get; set; }
        public virtual DbSet<CTN> CTNS { get; set; }
        public virtual DbSet<CTR1> CTR1 { get; set; }
        public virtual DbSet<CTR2> CTR2 { get; set; }
        public virtual DbSet<CUDC> CUDCs { get; set; }
        public virtual DbSet<CUFD> CUFDs { get; set; }
        public virtual DbSet<CUL1> CUL1 { get; set; }
        public virtual DbSet<CULG> CULGs { get; set; }
        public virtual DbSet<CUMF> CUMFs { get; set; }
        public virtual DbSet<CUMI> CUMIs { get; set; }
        public virtual DbSet<CUPC> CUPCs { get; set; }
        public virtual DbSet<CUVV> CUVVs { get; set; }
        public virtual DbSet<DAB1> DAB1 { get; set; }
        public virtual DbSet<DADB> DADBs { get; set; }
        public virtual DbSet<DAR1> DAR1 { get; set; }
        public virtual DbSet<DAR2> DAR2 { get; set; }
        public virtual DbSet<DAR3> DAR3 { get; set; }
        public virtual DbSet<DATB> DATBs { get; set; }
        public virtual DbSet<DBADM> DBADMs { get; set; }
        public virtual DbSet<DDT1> DDT1 { get; set; }
        public virtual DbSet<DGP1> DGP1 { get; set; }
        public virtual DbSet<DGP2> DGP2 { get; set; }
        public virtual DbSet<DGP3> DGP3 { get; set; }
        public virtual DbSet<DGP4> DGP4 { get; set; }
        public virtual DbSet<DGP5> DGP5 { get; set; }
        public virtual DbSet<DLN1> DLN1 { get; set; }
        public virtual DbSet<DLN10> DLN10 { get; set; }
        public virtual DbSet<DLN11> DLN11 { get; set; }
        public virtual DbSet<DLN12> DLN12 { get; set; }
        public virtual DbSet<DLN13> DLN13 { get; set; }
        public virtual DbSet<DLN14> DLN14 { get; set; }
        public virtual DbSet<DLN15> DLN15 { get; set; }
        public virtual DbSet<DLN16> DLN16 { get; set; }
        public virtual DbSet<DLN17> DLN17 { get; set; }
        public virtual DbSet<DLN18> DLN18 { get; set; }
        public virtual DbSet<DLN19> DLN19 { get; set; }
        public virtual DbSet<DLN2> DLN2 { get; set; }
        public virtual DbSet<DLN20> DLN20 { get; set; }
        public virtual DbSet<DLN3> DLN3 { get; set; }
        public virtual DbSet<DLN4> DLN4 { get; set; }
        public virtual DbSet<DLN5> DLN5 { get; set; }
        public virtual DbSet<DLN6> DLN6 { get; set; }
        public virtual DbSet<DLN7> DLN7 { get; set; }
        public virtual DbSet<DLN8> DLN8 { get; set; }
        public virtual DbSet<DLN9> DLN9 { get; set; }
        public virtual DbSet<DMW1> DMW1 { get; set; }
        public virtual DbSet<DOC20> DOC20 { get; set; }
        public virtual DbSet<DPI1> DPI1 { get; set; }
        public virtual DbSet<DPI10> DPI10 { get; set; }
        public virtual DbSet<DPI11> DPI11 { get; set; }
        public virtual DbSet<DPI12> DPI12 { get; set; }
        public virtual DbSet<DPI13> DPI13 { get; set; }
        public virtual DbSet<DPI14> DPI14 { get; set; }
        public virtual DbSet<DPI15> DPI15 { get; set; }
        public virtual DbSet<DPI16> DPI16 { get; set; }
        public virtual DbSet<DPI17> DPI17 { get; set; }
        public virtual DbSet<DPI18> DPI18 { get; set; }
        public virtual DbSet<DPI19> DPI19 { get; set; }
        public virtual DbSet<DPI2> DPI2 { get; set; }
        public virtual DbSet<DPI20> DPI20 { get; set; }
        public virtual DbSet<DPI3> DPI3 { get; set; }
        public virtual DbSet<DPI4> DPI4 { get; set; }
        public virtual DbSet<DPI5> DPI5 { get; set; }
        public virtual DbSet<DPI6> DPI6 { get; set; }
        public virtual DbSet<DPI7> DPI7 { get; set; }
        public virtual DbSet<DPI8> DPI8 { get; set; }
        public virtual DbSet<DPI9> DPI9 { get; set; }
        public virtual DbSet<DPO1> DPO1 { get; set; }
        public virtual DbSet<DPO10> DPO10 { get; set; }
        public virtual DbSet<DPO11> DPO11 { get; set; }
        public virtual DbSet<DPO12> DPO12 { get; set; }
        public virtual DbSet<DPO13> DPO13 { get; set; }
        public virtual DbSet<DPO14> DPO14 { get; set; }
        public virtual DbSet<DPO15> DPO15 { get; set; }
        public virtual DbSet<DPO16> DPO16 { get; set; }
        public virtual DbSet<DPO17> DPO17 { get; set; }
        public virtual DbSet<DPO18> DPO18 { get; set; }
        public virtual DbSet<DPO19> DPO19 { get; set; }
        public virtual DbSet<DPO2> DPO2 { get; set; }
        public virtual DbSet<DPO20> DPO20 { get; set; }
        public virtual DbSet<DPO3> DPO3 { get; set; }
        public virtual DbSet<DPO4> DPO4 { get; set; }
        public virtual DbSet<DPO5> DPO5 { get; set; }
        public virtual DbSet<DPO6> DPO6 { get; set; }
        public virtual DbSet<DPO7> DPO7 { get; set; }
        public virtual DbSet<DPO8> DPO8 { get; set; }
        public virtual DbSet<DPO9> DPO9 { get; set; }
        public virtual DbSet<DPS1> DPS1 { get; set; }
        public virtual DbSet<DRF1> DRF1 { get; set; }
        public virtual DbSet<DRF10> DRF10 { get; set; }
        public virtual DbSet<DRF11> DRF11 { get; set; }
        public virtual DbSet<DRF12> DRF12 { get; set; }
        public virtual DbSet<DRF13> DRF13 { get; set; }
        public virtual DbSet<DRF14> DRF14 { get; set; }
        public virtual DbSet<DRF15> DRF15 { get; set; }
        public virtual DbSet<DRF16> DRF16 { get; set; }
        public virtual DbSet<DRF17> DRF17 { get; set; }
        public virtual DbSet<DRF18> DRF18 { get; set; }
        public virtual DbSet<DRF19> DRF19 { get; set; }
        public virtual DbSet<DRF2> DRF2 { get; set; }
        public virtual DbSet<DRF20> DRF20 { get; set; }
        public virtual DbSet<DRF3> DRF3 { get; set; }
        public virtual DbSet<DRF4> DRF4 { get; set; }
        public virtual DbSet<DRF5> DRF5 { get; set; }
        public virtual DbSet<DRF6> DRF6 { get; set; }
        public virtual DbSet<DRF7> DRF7 { get; set; }
        public virtual DbSet<DRF8> DRF8 { get; set; }
        public virtual DbSet<DRF9> DRF9 { get; set; }
        public virtual DbSet<DRN1> DRN1 { get; set; }
        public virtual DbSet<DRN2> DRN2 { get; set; }
        public virtual DbSet<DSC1> DSC1 { get; set; }
        public virtual DbSet<DTP1> DTP1 { get; set; }
        public virtual DbSet<DUT1> DUT1 { get; set; }
        public virtual DbSet<DWZ1> DWZ1 { get; set; }
        public virtual DbSet<DWZ2> DWZ2 { get; set; }
        public virtual DbSet<DWZ3> DWZ3 { get; set; }
        public virtual DbSet<ECM1> ECM1 { get; set; }
        public virtual DbSet<ECM2> ECM2 { get; set; }
        public virtual DbSet<ECM3> ECM3 { get; set; }
        public virtual DbSet<EDG1> EDG1 { get; set; }
        public virtual DbSet<EJB1> EJB1 { get; set; }
        public virtual DbSet<EJB2> EJB2 { get; set; }
        public virtual DbSet<EJD1> EJD1 { get; set; }
        public virtual DbSet<ENT1> ENT1 { get; set; }
        public virtual DbSet<EOY1> EOY1 { get; set; }
        public virtual DbSet<ERX1> ERX1 { get; set; }
        public virtual DbSet<FAA1> FAA1 { get; set; }
        public virtual DbSet<FAC1> FAC1 { get; set; }
        public virtual DbSet<FAC2> FAC2 { get; set; }
        public virtual DbSet<FAM1> FAM1 { get; set; }
        public virtual DbSet<FAR1> FAR1 { get; set; }
        public virtual DbSet<FCT1> FCT1 { get; set; }
        public virtual DbSet<FIX1> FIX1 { get; set; }
        public virtual DbSet<FLT1> FLT1 { get; set; }
        public virtual DbSet<FML1> FML1 { get; set; }
        public virtual DbSet<FRC1> FRC1 { get; set; }
        public virtual DbSet<FTR1> FTR1 { get; set; }
        public virtual DbSet<FTR2> FTR2 { get; set; }
        public virtual DbSet<FTR3> FTR3 { get; set; }
        public virtual DbSet<GBI1> GBI1 { get; set; }
        public virtual DbSet<GBI10> GBI10 { get; set; }
        public virtual DbSet<GBI11> GBI11 { get; set; }
        public virtual DbSet<GBI12> GBI12 { get; set; }
        public virtual DbSet<GBI13> GBI13 { get; set; }
        public virtual DbSet<GBI14> GBI14 { get; set; }
        public virtual DbSet<GBI15> GBI15 { get; set; }
        public virtual DbSet<GBI16> GBI16 { get; set; }
        public virtual DbSet<GBI2> GBI2 { get; set; }
        public virtual DbSet<GBI3> GBI3 { get; set; }
        public virtual DbSet<GBI4> GBI4 { get; set; }
        public virtual DbSet<GBI5> GBI5 { get; set; }
        public virtual DbSet<GBI6> GBI6 { get; set; }
        public virtual DbSet<GBI7> GBI7 { get; set; }
        public virtual DbSet<GBI8> GBI8 { get; set; }
        public virtual DbSet<GBI9> GBI9 { get; set; }
        public virtual DbSet<GFL1> GFL1 { get; set; }
        public virtual DbSet<GFL2> GFL2 { get; set; }
        public virtual DbSet<GTI1> GTI1 { get; set; }
        public virtual DbSet<GTM1> GTM1 { get; set; }
        public virtual DbSet<HEM1> HEM1 { get; set; }
        public virtual DbSet<HEM2> HEM2 { get; set; }
        public virtual DbSet<HEM3> HEM3 { get; set; }
        public virtual DbSet<HEM4> HEM4 { get; set; }
        public virtual DbSet<HEM5> HEM5 { get; set; }
        public virtual DbSet<HEM6> HEM6 { get; set; }
        public virtual DbSet<HEM7> HEM7 { get; set; }
        public virtual DbSet<HET1> HET1 { get; set; }
        public virtual DbSet<HLD1> HLD1 { get; set; }
        public virtual DbSet<HMM1> HMM1 { get; set; }
        public virtual DbSet<HMM2> HMM2 { get; set; }
        public virtual DbSet<HTM1> HTM1 { get; set; }
        public virtual DbSet<ICD1> ICD1 { get; set; }
        public virtual DbSet<ICD2> ICD2 { get; set; }
        public virtual DbSet<ICD3> ICD3 { get; set; }
        public virtual DbSet<IEI1> IEI1 { get; set; }
        public virtual DbSet<IEI10> IEI10 { get; set; }
        public virtual DbSet<IEI11> IEI11 { get; set; }
        public virtual DbSet<IEI12> IEI12 { get; set; }
        public virtual DbSet<IEI13> IEI13 { get; set; }
        public virtual DbSet<IEI14> IEI14 { get; set; }
        public virtual DbSet<IEI15> IEI15 { get; set; }
        public virtual DbSet<IEI16> IEI16 { get; set; }
        public virtual DbSet<IEI17> IEI17 { get; set; }
        public virtual DbSet<IEI18> IEI18 { get; set; }
        public virtual DbSet<IEI19> IEI19 { get; set; }
        public virtual DbSet<IEI2> IEI2 { get; set; }
        public virtual DbSet<IEI20> IEI20 { get; set; }
        public virtual DbSet<IEI3> IEI3 { get; set; }
        public virtual DbSet<IEI4> IEI4 { get; set; }
        public virtual DbSet<IEI5> IEI5 { get; set; }
        public virtual DbSet<IEI6> IEI6 { get; set; }
        public virtual DbSet<IEI7> IEI7 { get; set; }
        public virtual DbSet<IEI8> IEI8 { get; set; }
        public virtual DbSet<IEI9> IEI9 { get; set; }
        public virtual DbSet<IGE1> IGE1 { get; set; }
        public virtual DbSet<IGE10> IGE10 { get; set; }
        public virtual DbSet<IGE11> IGE11 { get; set; }
        public virtual DbSet<IGE12> IGE12 { get; set; }
        public virtual DbSet<IGE13> IGE13 { get; set; }
        public virtual DbSet<IGE14> IGE14 { get; set; }
        public virtual DbSet<IGE15> IGE15 { get; set; }
        public virtual DbSet<IGE16> IGE16 { get; set; }
        public virtual DbSet<IGE17> IGE17 { get; set; }
        public virtual DbSet<IGE18> IGE18 { get; set; }
        public virtual DbSet<IGE19> IGE19 { get; set; }
        public virtual DbSet<IGE2> IGE2 { get; set; }
        public virtual DbSet<IGE20> IGE20 { get; set; }
        public virtual DbSet<IGE3> IGE3 { get; set; }
        public virtual DbSet<IGE4> IGE4 { get; set; }
        public virtual DbSet<IGE5> IGE5 { get; set; }
        public virtual DbSet<IGE6> IGE6 { get; set; }
        public virtual DbSet<IGE7> IGE7 { get; set; }
        public virtual DbSet<IGE8> IGE8 { get; set; }
        public virtual DbSet<IGE9> IGE9 { get; set; }
        public virtual DbSet<IGN1> IGN1 { get; set; }
        public virtual DbSet<IGN10> IGN10 { get; set; }
        public virtual DbSet<IGN11> IGN11 { get; set; }
        public virtual DbSet<IGN12> IGN12 { get; set; }
        public virtual DbSet<IGN13> IGN13 { get; set; }
        public virtual DbSet<IGN14> IGN14 { get; set; }
        public virtual DbSet<IGN15> IGN15 { get; set; }
        public virtual DbSet<IGN16> IGN16 { get; set; }
        public virtual DbSet<IGN17> IGN17 { get; set; }
        public virtual DbSet<IGN18> IGN18 { get; set; }
        public virtual DbSet<IGN19> IGN19 { get; set; }
        public virtual DbSet<IGN2> IGN2 { get; set; }
        public virtual DbSet<IGN20> IGN20 { get; set; }
        public virtual DbSet<IGN3> IGN3 { get; set; }
        public virtual DbSet<IGN4> IGN4 { get; set; }
        public virtual DbSet<IGN5> IGN5 { get; set; }
        public virtual DbSet<IGN6> IGN6 { get; set; }
        public virtual DbSet<IGN7> IGN7 { get; set; }
        public virtual DbSet<IGN8> IGN8 { get; set; }
        public virtual DbSet<IGN9> IGN9 { get; set; }
        public virtual DbSet<ILM1> ILM1 { get; set; }
        public virtual DbSet<ILM2> ILM2 { get; set; }
        public virtual DbSet<IMT1> IMT1 { get; set; }
        public virtual DbSet<IMT11> IMT11 { get; set; }
        public virtual DbSet<INC1> INC1 { get; set; }
        public virtual DbSet<INC2> INC2 { get; set; }
        public virtual DbSet<INC3> INC3 { get; set; }
        public virtual DbSet<INV1> INV1 { get; set; }
        public virtual DbSet<INV10> INV10 { get; set; }
        public virtual DbSet<INV11> INV11 { get; set; }
        public virtual DbSet<INV12> INV12 { get; set; }
        public virtual DbSet<INV13> INV13 { get; set; }
        public virtual DbSet<INV14> INV14 { get; set; }
        public virtual DbSet<INV15> INV15 { get; set; }
        public virtual DbSet<INV16> INV16 { get; set; }
        public virtual DbSet<INV17> INV17 { get; set; }
        public virtual DbSet<INV18> INV18 { get; set; }
        public virtual DbSet<INV19> INV19 { get; set; }
        public virtual DbSet<INV2> INV2 { get; set; }
        public virtual DbSet<INV20> INV20 { get; set; }
        public virtual DbSet<INV3> INV3 { get; set; }
        public virtual DbSet<INV4> INV4 { get; set; }
        public virtual DbSet<INV5> INV5 { get; set; }
        public virtual DbSet<INV6> INV6 { get; set; }
        public virtual DbSet<INV7> INV7 { get; set; }
        public virtual DbSet<INV8> INV8 { get; set; }
        public virtual DbSet<INV9> INV9 { get; set; }
        public virtual DbSet<IOD1> IOD1 { get; set; }
        public virtual DbSet<IOD2> IOD2 { get; set; }
        public virtual DbSet<IPD1> IPD1 { get; set; }
        public virtual DbSet<IPD2> IPD2 { get; set; }
        public virtual DbSet<IPD3> IPD3 { get; set; }
        public virtual DbSet<IPF1> IPF1 { get; set; }
        public virtual DbSet<IPF2> IPF2 { get; set; }
        public virtual DbSet<IPF3> IPF3 { get; set; }
        public virtual DbSet<IQI1> IQI1 { get; set; }
        public virtual DbSet<IQI2> IQI2 { get; set; }
        public virtual DbSet<IQR1> IQR1 { get; set; }
        public virtual DbSet<IQR2> IQR2 { get; set; }
        public virtual DbSet<IQR3> IQR3 { get; set; }
        public virtual DbSet<ISW1> ISW1 { get; set; }
        public virtual DbSet<ISW2> ISW2 { get; set; }
        public virtual DbSet<ISW3> ISW3 { get; set; }
        public virtual DbSet<ITL1> ITL1 { get; set; }
        public virtual DbSet<ITM1> ITM1 { get; set; }
        public virtual DbSet<ITM10> ITM10 { get; set; }
        public virtual DbSet<ITM11> ITM11 { get; set; }
        public virtual DbSet<ITM12> ITM12 { get; set; }
        public virtual DbSet<ITM13> ITM13 { get; set; }
        public virtual DbSet<ITM2> ITM2 { get; set; }
        public virtual DbSet<ITM3> ITM3 { get; set; }
        public virtual DbSet<ITM4> ITM4 { get; set; }
        public virtual DbSet<ITM5> ITM5 { get; set; }
        public virtual DbSet<ITM6> ITM6 { get; set; }
        public virtual DbSet<ITM7> ITM7 { get; set; }
        public virtual DbSet<ITM8> ITM8 { get; set; }
        public virtual DbSet<ITM9> ITM9 { get; set; }
        public virtual DbSet<ITR1> ITR1 { get; set; }
        public virtual DbSet<ITT1> ITT1 { get; set; }
        public virtual DbSet<ITW1> ITW1 { get; set; }
        public virtual DbSet<IVL1> IVL1 { get; set; }
        public virtual DbSet<IVLG> IVLGs { get; set; }
        public virtual DbSet<IVM1> IVM1 { get; set; }
        public virtual DbSet<IVRU> IVRUs { get; set; }
        public virtual DbSet<IWB1> IWB1 { get; set; }
        public virtual DbSet<IWB2> IWB2 { get; set; }
        public virtual DbSet<IWZ1> IWZ1 { get; set; }
        public virtual DbSet<IWZ2> IWZ2 { get; set; }
        public virtual DbSet<IWZ3> IWZ3 { get; set; }
        public virtual DbSet<JDT1> JDT1 { get; set; }
        public virtual DbSet<JDT2> JDT2 { get; set; }
        public virtual DbSet<JST1> JST1 { get; set; }
        public virtual DbSet<KPS1> KPS1 { get; set; }
        public virtual DbSet<LGL1> LGL1 { get; set; }
        public virtual DbSet<LIVI> LIVIs { get; set; }
        public virtual DbSet<LIVI1> LIVI1 { get; set; }
        public virtual DbSet<LLR1> LLR1 { get; set; }
        public virtual DbSet<MAP1> MAP1 { get; set; }
        public virtual DbSet<MAP2> MAP2 { get; set; }
        public virtual DbSet<MDC1> MDC1 { get; set; }
        public virtual DbSet<MDC2> MDC2 { get; set; }
        public virtual DbSet<MDP1> MDP1 { get; set; }
        public virtual DbSet<MDP2> MDP2 { get; set; }
        public virtual DbSet<MDP3> MDP3 { get; set; }
        public virtual DbSet<MDR1> MDR1 { get; set; }
        public virtual DbSet<MIN1> MIN1 { get; set; }
        public virtual DbSet<MIN2> MIN2 { get; set; }
        public virtual DbSet<MIV1> MIV1 { get; set; }
        public virtual DbSet<MIV2> MIV2 { get; set; }
        public virtual DbSet<MLS1> MLS1 { get; set; }
        public virtual DbSet<MLT1> MLT1 { get; set; }
        public virtual DbSet<MRV1> MRV1 { get; set; }
        public virtual DbSet<MRV2> MRV2 { get; set; }
        public virtual DbSet<MRV3> MRV3 { get; set; }
        public virtual DbSet<MSN1> MSN1 { get; set; }
        public virtual DbSet<MSN2> MSN2 { get; set; }
        public virtual DbSet<MSN3> MSN3 { get; set; }
        public virtual DbSet<MSN4> MSN4 { get; set; }
        public virtual DbSet<MSN5> MSN5 { get; set; }
        public virtual DbSet<MTH1V> MTH1V { get; set; }
        public virtual DbSet<MTH2V> MTH2V { get; set; }
        public virtual DbSet<MTH3V> MTH3V { get; set; }
        public virtual DbSet<NFN1> NFN1 { get; set; }
        public virtual DbSet<NFN2> NFN2 { get; set; }
        public virtual DbSet<NFN3> NFN3 { get; set; }
        public virtual DbSet<NFN4> NFN4 { get; set; }
        public virtual DbSet<NNM1> NNM1 { get; set; }
        public virtual DbSet<NNM2> NNM2 { get; set; }
        public virtual DbSet<NNM3> NNM3 { get; set; }
        public virtual DbSet<NNM4> NNM4 { get; set; }
        public virtual DbSet<NNM5> NNM5 { get; set; }
        public virtual DbSet<NNM6> NNM6 { get; set; }
        public virtual DbSet<OACD> OACDs { get; set; }
        public virtual DbSet<OACG> OACGs { get; set; }
        public virtual DbSet<OACK> OACKs { get; set; }
        public virtual DbSet<OACM> OACMs { get; set; }
        public virtual DbSet<OACP> OACPs { get; set; }
        public virtual DbSet<OACQ> OACQs { get; set; }
        public virtual DbSet<OACR> OACRs { get; set; }
        public virtual DbSet<OAC> OACS { get; set; }
        public virtual DbSet<OACT> OACTs { get; set; }
        public virtual DbSet<OADF> OADFs { get; set; }
        public virtual DbSet<OADG> OADGs { get; set; }
        public virtual DbSet<OADM> OADMs { get; set; }
        public virtual DbSet<OADP> OADPs { get; set; }
        public virtual DbSet<OADT> OADTs { get; set; }
        public virtual DbSet<OAGP> OAGPs { get; set; }
        public virtual DbSet<OAG> OAGS { get; set; }
        public virtual DbSet<OAIB> OAIBs { get; set; }
        public virtual DbSet<OAIM> OAIMs { get; set; }
        public virtual DbSet<OALC> OALCs { get; set; }
        public virtual DbSet<OALI> OALIs { get; set; }
        public virtual DbSet<OALR> OALRs { get; set; }
        public virtual DbSet<OALT> OALTs { get; set; }
        public virtual DbSet<OAMD> OAMDs { get; set; }
        public virtual DbSet<OAOB> OAOBs { get; set; }
        public virtual DbSet<OARG> OARGs { get; set; }
        public virtual DbSet<OARI> OARIs { get; set; }
        public virtual DbSet<OASC> OASCs { get; set; }
        public virtual DbSet<OASG> OASGs { get; set; }
        public virtual DbSet<OAT1> OAT1 { get; set; }
        public virtual DbSet<OAT2> OAT2 { get; set; }
        public virtual DbSet<OAT3> OAT3 { get; set; }
        public virtual DbSet<OAT4> OAT4 { get; set; }
        public virtual DbSet<OATC> OATCs { get; set; }
        public virtual DbSet<OBAT> OBATs { get; set; }
        public virtual DbSet<OBBI> OBBIs { get; set; }
        public virtual DbSet<OBBQ> OBBQs { get; set; }
        public virtual DbSet<OBCA> OBCAs { get; set; }
        public virtual DbSet<OBCD> OBCDs { get; set; }
        public virtual DbSet<OBCG> OBCGs { get; set; }
        public virtual DbSet<OBDC> OBDCs { get; set; }
        public virtual DbSet<OBFC> OBFCs { get; set; }
        public virtual DbSet<OBFI> OBFIs { get; set; }
        public virtual DbSet<OBGD> OBGDs { get; set; }
        public virtual DbSet<OBG> OBGS { get; set; }
        public virtual DbSet<OBGT> OBGTs { get; set; }
        public virtual DbSet<OBIN> OBINs { get; set; }
        public virtual DbSet<OBMI> OBMIs { get; set; }
        public virtual DbSet<OBNH> OBNHs { get; set; }
        public virtual DbSet<OBNI> OBNIs { get; set; }
        public virtual DbSet<OBNK> OBNKs { get; set; }
        public virtual DbSet<OBOC> OBOCs { get; set; }
        public virtual DbSet<OBOD> OBODs { get; set; }
        public virtual DbSet<OBOE> OBOEs { get; set; }
        public virtual DbSet<OBO> OBOS { get; set; }
        public virtual DbSet<OBOT> OBOTs { get; set; }
        public virtual DbSet<OBOX> OBOXes { get; set; }
        public virtual DbSet<OBPL> OBPLs { get; set; }
        public virtual DbSet<OBPP> OBPPs { get; set; }
        public virtual DbSet<OBSI> OBSIs { get; set; }
        public virtual DbSet<OBSL> OBSLs { get; set; }
        public virtual DbSet<OBST> OBSTs { get; set; }
        public virtual DbSet<OBTC> OBTCs { get; set; }
        public virtual DbSet<OBTD> OBTDs { get; set; }
        public virtual DbSet<OBTF> OBTFs { get; set; }
        public virtual DbSet<OBTL> OBTLs { get; set; }
        public virtual DbSet<OBTN> OBTNs { get; set; }
        public virtual DbSet<OBTQ> OBTQs { get; set; }
        public virtual DbSet<OBTW> OBTWs { get; set; }
        public virtual DbSet<OBVL> OBVLs { get; set; }
        public virtual DbSet<OCBI> OCBIs { get; set; }
        public virtual DbSet<OCCD> OCCDs { get; set; }
        public virtual DbSet<OCC> OCCS { get; set; }
        public virtual DbSet<OCCT> OCCTs { get; set; }
        public virtual DbSet<OCDC> OCDCs { get; set; }
        public virtual DbSet<OCDP> OCDPs { get; set; }
        public virtual DbSet<OCDT> OCDTs { get; set; }
        public virtual DbSet<OCFH> OCFHs { get; set; }
        public virtual DbSet<OCFL> OCFLs { get; set; }
        public virtual DbSet<OCFN> OCFNs { get; set; }
        public virtual DbSet<OCFP> OCFPs { get; set; }
        public virtual DbSet<OCFT> OCFTs { get; set; }
        public virtual DbSet<OCFW> OCFWs { get; set; }
        public virtual DbSet<OCHD> OCHDs { get; set; }
        public virtual DbSet<OCHF> OCHFs { get; set; }
        public virtual DbSet<OCHH> OCHHs { get; set; }
        public virtual DbSet<OCHO> OCHOes { get; set; }
        public virtual DbSet<OCHP> OCHPs { get; set; }
        public virtual DbSet<OCIF> OCIFs { get; set; }
        public virtual DbSet<OCIG> OCIGs { get; set; }
        public virtual DbSet<OCIN> OCINs { get; set; }
        public virtual DbSet<OCIP> OCIPs { get; set; }
        public virtual DbSet<OCLA> OCLAs { get; set; }
        public virtual DbSet<OCLG> OCLGs { get; set; }
        public virtual DbSet<OCLO> OCLOes { get; set; }
        public virtual DbSet<OCL> OCLS { get; set; }
        public virtual DbSet<OCLT> OCLTs { get; set; }
        public virtual DbSet<OCMN> OCMNs { get; set; }
        public virtual DbSet<OCMT> OCMTs { get; set; }
        public virtual DbSet<OCNA> OCNAs { get; set; }
        public virtual DbSet<OCNT> OCNTs { get; set; }
        public virtual DbSet<OCOG> OCOGs { get; set; }
        public virtual DbSet<OCPC> OCPCs { get; set; }
        public virtual DbSet<OCPI> OCPIs { get; set; }
        public virtual DbSet<OCPL> OCPLs { get; set; }
        public virtual DbSet<OCPN> OCPNs { get; set; }
        public virtual DbSet<OCPR> OCPRs { get; set; }
        public virtual DbSet<OCPT> OCPTs { get; set; }
        public virtual DbSet<OCPV> OCPVs { get; set; }
        public virtual DbSet<OCQG> OCQGs { get; set; }
        public virtual DbSet<OCR1> OCR1 { get; set; }
        public virtual DbSet<OCRB> OCRBs { get; set; }
        public virtual DbSet<OCRC> OCRCs { get; set; }
        public virtual DbSet<OCRD> OCRDs { get; set; }
        public virtual DbSet<OCRG> OCRGs { get; set; }
        public virtual DbSet<OCRH> OCRHs { get; set; }
        public virtual DbSet<OCRN> OCRNs { get; set; }
        public virtual DbSet<OCRP> OCRPs { get; set; }
        public virtual DbSet<OCRT> OCRTs { get; set; }
        public virtual DbSet<OCRV> OCRVs { get; set; }
        public virtual DbSet<OCRY> OCRies { get; set; }
        public virtual DbSet<OCSC> OCSCs { get; set; }
        public virtual DbSet<OCSI> OCSIs { get; set; }
        public virtual DbSet<OCSN> OCSNs { get; set; }
        public virtual DbSet<OCSQ> OCSQs { get; set; }
        public virtual DbSet<OCST> OCSTs { get; set; }
        public virtual DbSet<OCSV> OCSVs { get; set; }
        public virtual DbSet<OCTG> OCTGs { get; set; }
        public virtual DbSet<OCTR> OCTRs { get; set; }
        public virtual DbSet<OCTT> OCTTs { get; set; }
        public virtual DbSet<OCUC> OCUCs { get; set; }
        public virtual DbSet<OCUL> OCULs { get; set; }
        public virtual DbSet<OCUP> OCUPs { get; set; }
        public virtual DbSet<OCYC> OCYCs { get; set; }
        public virtual DbSet<ODAB> ODABs { get; set; }
        public virtual DbSet<ODAR> ODARs { get; set; }
        public virtual DbSet<ODBN> ODBNs { get; set; }
        public virtual DbSet<ODBW> ODBWs { get; set; }
        public virtual DbSet<ODCC> ODCCs { get; set; }
        public virtual DbSet<ODCI> ODCIs { get; set; }
        public virtual DbSet<ODDG> ODDGs { get; set; }
        public virtual DbSet<ODDT> ODDTs { get; set; }
        public virtual DbSet<ODGL> ODGLs { get; set; }
        public virtual DbSet<ODGP> ODGPs { get; set; }
        public virtual DbSet<ODIM> ODIMs { get; set; }
        public virtual DbSet<ODLL> ODLLs { get; set; }
        public virtual DbSet<ODLN> ODLNs { get; set; }
        public virtual DbSet<ODMC> ODMCs { get; set; }
        public virtual DbSet<ODMW> ODMWs { get; set; }
        public virtual DbSet<ODNF> ODNFs { get; set; }
        public virtual DbSet<ODOR> ODORs { get; set; }
        public virtual DbSet<ODOW> ODOWs { get; set; }
        public virtual DbSet<ODOX> ODOXes { get; set; }
        public virtual DbSet<ODPA> ODPAs { get; set; }
        public virtual DbSet<ODPI> ODPIs { get; set; }
        public virtual DbSet<ODPO> ODPOes { get; set; }
        public virtual DbSet<ODPP> ODPPs { get; set; }
        public virtual DbSet<ODP> ODPS { get; set; }
        public virtual DbSet<ODPT> ODPTs { get; set; }
        public virtual DbSet<ODPV> ODPVs { get; set; }
        public virtual DbSet<ODRF> ODRFs { get; set; }
        public virtual DbSet<ODRN> ODRNs { get; set; }
        public virtual DbSet<ODSC> ODSCs { get; set; }
        public virtual DbSet<ODSN> ODSNs { get; set; }
        public virtual DbSet<ODSW> ODSWs { get; set; }
        public virtual DbSet<ODTP> ODTPs { get; set; }
        public virtual DbSet<ODTY> ODTies { get; set; }
        public virtual DbSet<ODUN> ODUNs { get; set; }
        public virtual DbSet<ODUT> ODUTs { get; set; }
        public virtual DbSet<ODW1> ODW1 { get; set; }
        public virtual DbSet<ODWZ> ODWZs { get; set; }
        public virtual DbSet<OECM> OECMs { get; set; }
        public virtual DbSet<OEDG> OEDGs { get; set; }
        public virtual DbSet<OEI1> OEI1 { get; set; }
        public virtual DbSet<OEI10> OEI10 { get; set; }
        public virtual DbSet<OEI11> OEI11 { get; set; }
        public virtual DbSet<OEI12> OEI12 { get; set; }
        public virtual DbSet<OEI13> OEI13 { get; set; }
        public virtual DbSet<OEI14> OEI14 { get; set; }
        public virtual DbSet<OEI15> OEI15 { get; set; }
        public virtual DbSet<OEI16> OEI16 { get; set; }
        public virtual DbSet<OEI17> OEI17 { get; set; }
        public virtual DbSet<OEI18> OEI18 { get; set; }
        public virtual DbSet<OEI19> OEI19 { get; set; }
        public virtual DbSet<OEI2> OEI2 { get; set; }
        public virtual DbSet<OEI20> OEI20 { get; set; }
        public virtual DbSet<OEI3> OEI3 { get; set; }
        public virtual DbSet<OEI4> OEI4 { get; set; }
        public virtual DbSet<OEI5> OEI5 { get; set; }
        public virtual DbSet<OEI6> OEI6 { get; set; }
        public virtual DbSet<OEI7> OEI7 { get; set; }
        public virtual DbSet<OEI8> OEI8 { get; set; }
        public virtual DbSet<OEI9> OEI9 { get; set; }
        public virtual DbSet<OEJB> OEJBs { get; set; }
        public virtual DbSet<OEJD> OEJDs { get; set; }
        public virtual DbSet<OENC> OENCs { get; set; }
        public virtual DbSet<OENT> OENTs { get; set; }
        public virtual DbSet<OEOY> OEOYs { get; set; }
        public virtual DbSet<OERN> OERNs { get; set; }
        public virtual DbSet<OERT> OERTs { get; set; }
        public virtual DbSet<OERX> OERXes { get; set; }
        public virtual DbSet<OEXD> OEXDs { get; set; }
        public virtual DbSet<OFAA> OFAAs { get; set; }
        public virtual DbSet<OFAC> OFACs { get; set; }
        public virtual DbSet<OFAM> OFAMs { get; set; }
        public virtual DbSet<OFAR> OFARs { get; set; }
        public virtual DbSet<OFCT> OFCTs { get; set; }
        public virtual DbSet<OFIX> OFIXes { get; set; }
        public virtual DbSet<OFLT> OFLTs { get; set; }
        public virtual DbSet<OFML> OFMLs { get; set; }
        public virtual DbSet<OFPC> OFPCs { get; set; }
        public virtual DbSet<OFPR> OFPRs { get; set; }
        public virtual DbSet<OFRC> OFRCs { get; set; }
        public virtual DbSet<OFRM> OFRMs { get; set; }
        public virtual DbSet<OFRT> OFRTs { get; set; }
        public virtual DbSet<OFTR> OFTRs { get; set; }
        public virtual DbSet<OFYM> OFYMs { get; set; }
        public virtual DbSet<OGAR> OGARs { get; set; }
        public virtual DbSet<OGBI> OGBIs { get; set; }
        public virtual DbSet<OGFL> OGFLs { get; set; }
        public virtual DbSet<OGPA> OGPAs { get; set; }
        public virtual DbSet<OGSP> OGSPs { get; set; }
        public virtual DbSet<OGTI> OGTIs { get; set; }
        public virtual DbSet<OGTM> OGTMs { get; set; }
        public virtual DbSet<OHED> OHEDs { get; set; }
        public virtual DbSet<OHEM> OHEMs { get; set; }
        public virtual DbSet<OHET> OHETs { get; set; }
        public virtual DbSet<OHLD> OHLDs { get; set; }
        public virtual DbSet<OHMM> OHMMs { get; set; }
        public virtual DbSet<OHP> OHPS { get; set; }
        public virtual DbSet<OHST> OHSTs { get; set; }
        public virtual DbSet<OHSV> OHSVs { get; set; }
        public virtual DbSet<OHTM> OHTMs { get; set; }
        public virtual DbSet<OHTR> OHTRs { get; set; }
        public virtual DbSet<OHTY> OHTies { get; set; }
        public virtual DbSet<OIBQ> OIBQs { get; set; }
        public virtual DbSet<OICD> OICDs { get; set; }
        public virtual DbSet<OIDC> OIDCs { get; set; }
        public virtual DbSet<OIDT> OIDTs { get; set; }
        public virtual DbSet<OIDX> OIDXes { get; set; }
        public virtual DbSet<OIEI> OIEIs { get; set; }
        public virtual DbSet<OIGE> OIGEs { get; set; }
        public virtual DbSet<OIGN> OIGNs { get; set; }
        public virtual DbSet<OIGW> OIGWs { get; set; }
        public virtual DbSet<OILM> OILMs { get; set; }
        public virtual DbSet<OIMT> OIMTs { get; set; }
        public virtual DbSet<OINC> OINCs { get; set; }
        public virtual DbSet<OIND> OINDs { get; set; }
        public virtual DbSet<OIN> OINS { get; set; }
        public virtual DbSet<OINV> OINVs { get; set; }
        public virtual DbSet<OIOD> OIODs { get; set; }
        public virtual DbSet<OIPD> OIPDs { get; set; }
        public virtual DbSet<OIPF> OIPFs { get; set; }
        public virtual DbSet<OIPO> OIPOes { get; set; }
        public virtual DbSet<OIQI> OIQIs { get; set; }
        public virtual DbSet<OIQR> OIQRs { get; set; }
        public virtual DbSet<OIRT> OIRTs { get; set; }
        public virtual DbSet<OISL> OISLs { get; set; }
        public virtual DbSet<OISR> OISRs { get; set; }
        public virtual DbSet<OIST> OISTs { get; set; }
        public virtual DbSet<OISW> OISWs { get; set; }
        public virtual DbSet<OITB> OITBs { get; set; }
        public virtual DbSet<OITG> OITGs { get; set; }
        public virtual DbSet<OITL> OITLs { get; set; }
        public virtual DbSet<OITM> OITMs { get; set; }
        public virtual DbSet<OITR> OITRs { get; set; }
        public virtual DbSet<OITT> OITTs { get; set; }
        public virtual DbSet<OITW> OITWs { get; set; }
        public virtual DbSet<OIVE> OIVEs { get; set; }
        public virtual DbSet<OIVK> OIVKs { get; set; }
        public virtual DbSet<OIVL> OIVLs { get; set; }
        public virtual DbSet<OIVM> OIVMs { get; set; }
        public virtual DbSet<OIVQ> OIVQs { get; set; }
        public virtual DbSet<OIWB> OIWBs { get; set; }
        public virtual DbSet<OIWZ> OIWZs { get; set; }
        public virtual DbSet<OJDT> OJDTs { get; set; }
        public virtual DbSet<OJET> OJETs { get; set; }
        public virtual DbSet<OJPE> OJPEs { get; set; }
        public virtual DbSet<OJST> OJSTs { get; set; }
        public virtual DbSet<OKP> OKPS { get; set; }
        public virtual DbSet<OKRT> OKRTs { get; set; }
        public virtual DbSet<OLCT> OLCTs { get; set; }
        public virtual DbSet<OLGL> OLGLs { get; set; }
        public virtual DbSet<OLGT> OLGTs { get; set; }
        public virtual DbSet<OLLF> OLLFs { get; set; }
        public virtual DbSet<OLLR> OLLRs { get; set; }
        public virtual DbSet<OLNG> OLNGs { get; set; }
        public virtual DbSet<OLNK> OLNKs { get; set; }
        public virtual DbSet<OLTB> OLTBs { get; set; }
        public virtual DbSet<OMAO> OMAOs { get; set; }
        public virtual DbSet<OMAP> OMAPs { get; set; }
        public virtual DbSet<OMDC> OMDCs { get; set; }
        public virtual DbSet<OMDP> OMDPs { get; set; }
        public virtual DbSet<OMDR> OMDRs { get; set; }
        public virtual DbSet<OMGP> OMGPs { get; set; }
        public virtual DbSet<OMIN> OMINs { get; set; }
        public virtual DbSet<OMIV> OMIVs { get; set; }
        public virtual DbSet<OML> OMLS { get; set; }
        public virtual DbSet<OMLT> OMLTs { get; set; }
        public virtual DbSet<OMP> OMPS { get; set; }
        public virtual DbSet<OMRC> OMRCs { get; set; }
        public virtual DbSet<OMRL> OMRLs { get; set; }
        public virtual DbSet<OMRV> OMRVs { get; set; }
        public virtual DbSet<OMSG> OMSGs { get; set; }
        public virtual DbSet<OMSN> OMSNs { get; set; }
        public virtual DbSet<OMTC> OMTCs { get; set; }
        public virtual DbSet<OMTH> OMTHs { get; set; }
        public virtual DbSet<OMTP> OMTPs { get; set; }
        public virtual DbSet<ONCM> ONCMs { get; set; }
        public virtual DbSet<ONFM> ONFMs { get; set; }
        public virtual DbSet<ONFN> ONFNs { get; set; }
        public virtual DbSet<ONFT> ONFTs { get; set; }
        public virtual DbSet<ONNM> ONNMs { get; set; }
        public virtual DbSet<ONOA> ONOAs { get; set; }
        public virtual DbSet<OOAT> OOATs { get; set; }
        public virtual DbSet<OOCC> OOCCs { get; set; }
        public virtual DbSet<OOCR> OOCRs { get; set; }
        public virtual DbSet<OODW> OODWs { get; set; }
        public virtual DbSet<OOEI> OOEIs { get; set; }
        public virtual DbSet<OOFR> OOFRs { get; set; }
        public virtual DbSet<OOIN> OOINs { get; set; }
        public virtual DbSet<OOIR> OOIRs { get; set; }
        public virtual DbSet<OOND> OONDs { get; set; }
        public virtual DbSet<OOPR> OOPRs { get; set; }
        public virtual DbSet<OORL> OORLs { get; set; }
        public virtual DbSet<OOSR> OOSRs { get; set; }
        public virtual DbSet<OOST> OOSTs { get; set; }
        public virtual DbSet<OPAC> OPACs { get; set; }
        public virtual DbSet<OPCH> OPCHes { get; set; }
        public virtual DbSet<OPCI> OPCIs { get; set; }
        public virtual DbSet<OPCT> OPCTs { get; set; }
        public virtual DbSet<OPDF> OPDFs { get; set; }
        public virtual DbSet<OPDN> OPDNs { get; set; }
        public virtual DbSet<OPDT> OPDTs { get; set; }
        public virtual DbSet<OPEX> OPEXes { get; set; }
        public virtual DbSet<OPFT> OPFTs { get; set; }
        public virtual DbSet<OPID> OPIDs { get; set; }
        public virtual DbSet<OPJT> OPJTs { get; set; }
        public virtual DbSet<OPKG> OPKGs { get; set; }
        public virtual DbSet<OPKL> OPKLs { get; set; }
        public virtual DbSet<OPLN> OPLNs { get; set; }
        public virtual DbSet<OPOI> OPOIs { get; set; }
        public virtual DbSet<OPOO> OPOOs { get; set; }
        public virtual DbSet<OPOR> OPORs { get; set; }
        public virtual DbSet<OPPA> OPPAs { get; set; }
        public virtual DbSet<OPQN> OPQNs { get; set; }
        public virtual DbSet<OPQT> OPQTs { get; set; }
        public virtual DbSet<OPQW> OPQWs { get; set; }
        public virtual DbSet<OPR1> OPR1 { get; set; }
        public virtual DbSet<OPR2> OPR2 { get; set; }
        public virtual DbSet<OPR3> OPR3 { get; set; }
        public virtual DbSet<OPR4> OPR4 { get; set; }
        public virtual DbSet<OPR5> OPR5 { get; set; }
        public virtual DbSet<OPRC> OPRCs { get; set; }
        public virtual DbSet<OPRF> OPRFs { get; set; }
        public virtual DbSet<OPRJ> OPRJs { get; set; }
        public virtual DbSet<OPRO> OPROes { get; set; }
        public virtual DbSet<OPRQ> OPRQs { get; set; }
        public virtual DbSet<OPRT> OPRTs { get; set; }
        public virtual DbSet<OPSC> OPSCs { get; set; }
        public virtual DbSet<OPTF> OPTFs { get; set; }
        public virtual DbSet<OPVL> OPVLs { get; set; }
        public virtual DbSet<OPWB> OPWBs { get; set; }
        public virtual DbSet<OPWZ> OPWZs { get; set; }
        public virtual DbSet<OPYB> OPYBs { get; set; }
        public virtual DbSet<OPYD> OPYDs { get; set; }
        public virtual DbSet<OPYM> OPYMs { get; set; }
        public virtual DbSet<OQCN> OQCNs { get; set; }
        public virtual DbSet<OQUE> OQUEs { get; set; }
        public virtual DbSet<OQUT> OQUTs { get; set; }
        public virtual DbSet<OQWZ> OQWZs { get; set; }
        public virtual DbSet<ORCL> ORCLs { get; set; }
        public virtual DbSet<ORCM> ORCMs { get; set; }
        public virtual DbSet<ORCN> ORCNs { get; set; }
        public virtual DbSet<ORCP> ORCPs { get; set; }
        public virtual DbSet<ORCR> ORCRs { get; set; }
        public virtual DbSet<ORCT> ORCTs { get; set; }
        public virtual DbSet<ORDN> ORDNs { get; set; }
        public virtual DbSet<ORDR> ORDRs { get; set; }
        public virtual DbSet<OREQ> OREQs { get; set; }
        public virtual DbSet<ORFL> ORFLs { get; set; }
        public virtual DbSet<ORIN> ORINs { get; set; }
        public virtual DbSet<ORIT> ORITs { get; set; }
        public virtual DbSet<ORLD> ORLDs { get; set; }
        public virtual DbSet<OROC> OROCs { get; set; }
        public virtual DbSet<ORPC> ORPCs { get; set; }
        public virtual DbSet<ORPD> ORPDs { get; set; }
        public virtual DbSet<ORSB> ORSBs { get; set; }
        public virtual DbSet<ORSC> ORSCs { get; set; }
        public virtual DbSet<ORSG> ORSGs { get; set; }
        public virtual DbSet<ORST> ORSTs { get; set; }
        public virtual DbSet<ORTI> ORTIs { get; set; }
        public virtual DbSet<ORTM> ORTMs { get; set; }
        public virtual DbSet<ORT> ORTS { get; set; }
        public virtual DbSet<ORTT> ORTTs { get; set; }
        public virtual DbSet<ORTW> ORTWs { get; set; }
        public virtual DbSet<OSAB> OSABs { get; set; }
        public virtual DbSet<OSAL> OSALs { get; set; }
        public virtual DbSet<OSBQ> OSBQs { get; set; }
        public virtual DbSet<OSCD> OSCDs { get; set; }
        public virtual DbSet<OSCG> OSCGs { get; set; }
        public virtual DbSet<OSCL> OSCLs { get; set; }
        public virtual DbSet<OSCM> OSCMs { get; set; }
        public virtual DbSet<OSCN> OSCNs { get; set; }
        public virtual DbSet<OSCO> OSCOes { get; set; }
        public virtual DbSet<OSCP> OSCPs { get; set; }
        public virtual DbSet<OSCR> OSCRs { get; set; }
        public virtual DbSet<OSC> OSCS { get; set; }
        public virtual DbSet<OSCT> OSCTs { get; set; }
        public virtual DbSet<OSEC> OSECs { get; set; }
        public virtual DbSet<OSGP> OSGPs { get; set; }
        public virtual DbSet<OSHP> OSHPs { get; set; }
        public virtual DbSet<OSHR> OSHRs { get; set; }
        public virtual DbSet<OSLM> OSLMs { get; set; }
        public virtual DbSet<OSLP> OSLPs { get; set; }
        public virtual DbSet<OSLR> OSLRs { get; set; }
        public virtual DbSet<OSLT> OSLTs { get; set; }
        public virtual DbSet<OSPG> OSPGs { get; set; }
        public virtual DbSet<OSPP> OSPPs { get; set; }
        public virtual DbSet<OSQR> OSQRs { get; set; }
        public virtual DbSet<OSRA> OSRAs { get; set; }
        public virtual DbSet<OSRL> OSRLs { get; set; }
        public virtual DbSet<OSRN> OSRNs { get; set; }
        public virtual DbSet<OSRQ> OSRQs { get; set; }
        public virtual DbSet<OSRT> OSRTs { get; set; }
        public virtual DbSet<OSRW> OSRWs { get; set; }
        public virtual DbSet<OSSP> OSSPs { get; set; }
        public virtual DbSet<OSST> OSSTs { get; set; }
        public virtual DbSet<OSTA> OSTAs { get; set; }
        public virtual DbSet<OSTB> OSTBs { get; set; }
        public virtual DbSet<OSTC> OSTCs { get; set; }
        public virtual DbSet<OSTQ> OSTQs { get; set; }
        public virtual DbSet<OSTT> OSTTs { get; set; }
        public virtual DbSet<OSVR> OSVRs { get; set; }
        public virtual DbSet<OSVT> OSVTs { get; set; }
        public virtual DbSet<OTAX> OTAXes { get; set; }
        public virtual DbSet<OTBP> OTBPs { get; set; }
        public virtual DbSet<OTCD> OTCDs { get; set; }
        public virtual DbSet<OTCX> OTCXes { get; set; }
        public virtual DbSet<OTER> OTERs { get; set; }
        public virtual DbSet<OTFC> OTFCs { get; set; }
        public virtual DbSet<OTGG> OTGGs { get; set; }
        public virtual DbSet<OTHL> OTHLs { get; set; }
        public virtual DbSet<OTIZ> OTIZs { get; set; }
        public virtual DbSet<OTNC> OTNCs { get; set; }
        public virtual DbSet<OTNN> OTNNs { get; set; }
        public virtual DbSet<OTOB> OTOBs { get; set; }
        public virtual DbSet<OTOF> OTOFs { get; set; }
        public virtual DbSet<OTPA> OTPAs { get; set; }
        public virtual DbSet<OTPI> OTPIs { get; set; }
        public virtual DbSet<OTPL> OTPLs { get; set; }
        public virtual DbSet<OTPR> OTPRs { get; set; }
        public virtual DbSet<OTP> OTPS { get; set; }
        public virtual DbSet<OTPW> OTPWs { get; set; }
        public virtual DbSet<OTRA> OTRAs { get; set; }
        public virtual DbSet<OTRC> OTRCs { get; set; }
        public virtual DbSet<OTRN> OTRNs { get; set; }
        public virtual DbSet<OTR> OTRS { get; set; }
        public virtual DbSet<OTRT> OTRTs { get; set; }
        public virtual DbSet<OTRX> OTRXes { get; set; }
        public virtual DbSet<OTSC> OTSCs { get; set; }
        public virtual DbSet<OTSI> OTSIs { get; set; }
        public virtual DbSet<OTW> OTWS { get; set; }
        public virtual DbSet<OTXD> OTXDs { get; set; }
        public virtual DbSet<OUBR> OUBRs { get; set; }
        public virtual DbSet<OUDG> OUDGs { get; set; }
        public virtual DbSet<OUDO> OUDOes { get; set; }
        public virtual DbSet<OUDP> OUDPs { get; set; }
        public virtual DbSet<OUGP> OUGPs { get; set; }
        public virtual DbSet<OUKD> OUKDs { get; set; }
        public virtual DbSet<OULA> OULAs { get; set; }
        public virtual DbSet<OUOM> OUOMs { get; set; }
        public virtual DbSet<OUPT> OUPTs { get; set; }
        public virtual DbSet<OUQR> OUQRs { get; set; }
        public virtual DbSet<OUSG> OUSGs { get; set; }
        public virtual DbSet<OUSR> OUSRs { get; set; }
        public virtual DbSet<OUTB> OUTBs { get; set; }
        public virtual DbSet<OUTX> OUTXes { get; set; }
        public virtual DbSet<OVNM> OVNMs { get; set; }
        public virtual DbSet<OVPM> OVPMs { get; set; }
        public virtual DbSet<OVRT> OVRTs { get; set; }
        public virtual DbSet<OVRW> OVRWs { get; set; }
        public virtual DbSet<OVTG> OVTGs { get; set; }
        public virtual DbSet<OVTP> OVTPs { get; set; }
        public virtual DbSet<OVTR> OVTRs { get; set; }
        public virtual DbSet<OWDD> OWDDs { get; set; }
        public virtual DbSet<OWDT> OWDTs { get; set; }
        public virtual DbSet<OWEX> OWEXes { get; set; }
        public virtual DbSet<OWFER> OWFERs { get; set; }
        public virtual DbSet<OWFI> OWFIs { get; set; }
        public virtual DbSet<OWGT> OWGTs { get; set; }
        public virtual DbSet<OWH> OWHS { get; set; }
        public virtual DbSet<OWHT> OWHTs { get; set; }
        public virtual DbSet<OWIN> OWINs { get; set; }
        public virtual DbSet<OWJB> OWJBs { get; set; }
        public virtual DbSet<OWKO> OWKOes { get; set; }
        public virtual DbSet<OWL> OWLS { get; set; }
        public virtual DbSet<OWMG> OWMGs { get; set; }
        public virtual DbSet<OWOR> OWORs { get; set; }
        public virtual DbSet<OWPK> OWPKs { get; set; }
        public virtual DbSet<OWST> OWSTs { get; set; }
        public virtual DbSet<OWTI> OWTIs { get; set; }
        public virtual DbSet<OWTJ> OWTJs { get; set; }
        public virtual DbSet<OWTM> OWTMs { get; set; }
        public virtual DbSet<OWTQ> OWTQs { get; set; }
        public virtual DbSet<OWTR> OWTRs { get; set; }
        public virtual DbSet<OWT> OWTS { get; set; }
        public virtual DbSet<OWTT> OWTTs { get; set; }
        public virtual DbSet<PCH1> PCH1 { get; set; }
        public virtual DbSet<PCH10> PCH10 { get; set; }
        public virtual DbSet<PCH11> PCH11 { get; set; }
        public virtual DbSet<PCH12> PCH12 { get; set; }
        public virtual DbSet<PCH13> PCH13 { get; set; }
        public virtual DbSet<PCH14> PCH14 { get; set; }
        public virtual DbSet<PCH15> PCH15 { get; set; }
        public virtual DbSet<PCH16> PCH16 { get; set; }
        public virtual DbSet<PCH17> PCH17 { get; set; }
        public virtual DbSet<PCH18> PCH18 { get; set; }
        public virtual DbSet<PCH19> PCH19 { get; set; }
        public virtual DbSet<PCH2> PCH2 { get; set; }
        public virtual DbSet<PCH20> PCH20 { get; set; }
        public virtual DbSet<PCH3> PCH3 { get; set; }
        public virtual DbSet<PCH4> PCH4 { get; set; }
        public virtual DbSet<PCH5> PCH5 { get; set; }
        public virtual DbSet<PCH6> PCH6 { get; set; }
        public virtual DbSet<PCH7> PCH7 { get; set; }
        public virtual DbSet<PCH8> PCH8 { get; set; }
        public virtual DbSet<PCH9> PCH9 { get; set; }
        public virtual DbSet<PCI1> PCI1 { get; set; }
        public virtual DbSet<PDF1> PDF1 { get; set; }
        public virtual DbSet<PDF2> PDF2 { get; set; }
        public virtual DbSet<PDF3> PDF3 { get; set; }
        public virtual DbSet<PDF4> PDF4 { get; set; }
        public virtual DbSet<PDF5> PDF5 { get; set; }
        public virtual DbSet<PDF6> PDF6 { get; set; }
        public virtual DbSet<PDF7> PDF7 { get; set; }
        public virtual DbSet<PDF8> PDF8 { get; set; }
        public virtual DbSet<PDN1> PDN1 { get; set; }
        public virtual DbSet<PDN10> PDN10 { get; set; }
        public virtual DbSet<PDN11> PDN11 { get; set; }
        public virtual DbSet<PDN12> PDN12 { get; set; }
        public virtual DbSet<PDN13> PDN13 { get; set; }
        public virtual DbSet<PDN14> PDN14 { get; set; }
        public virtual DbSet<PDN15> PDN15 { get; set; }
        public virtual DbSet<PDN16> PDN16 { get; set; }
        public virtual DbSet<PDN17> PDN17 { get; set; }
        public virtual DbSet<PDN18> PDN18 { get; set; }
        public virtual DbSet<PDN19> PDN19 { get; set; }
        public virtual DbSet<PDN2> PDN2 { get; set; }
        public virtual DbSet<PDN20> PDN20 { get; set; }
        public virtual DbSet<PDN3> PDN3 { get; set; }
        public virtual DbSet<PDN4> PDN4 { get; set; }
        public virtual DbSet<PDN5> PDN5 { get; set; }
        public virtual DbSet<PDN6> PDN6 { get; set; }
        public virtual DbSet<PDN7> PDN7 { get; set; }
        public virtual DbSet<PDN8> PDN8 { get; set; }
        public virtual DbSet<PDN9> PDN9 { get; set; }
        public virtual DbSet<PEX1> PEX1 { get; set; }
        public virtual DbSet<PJT1> PJT1 { get; set; }
        public virtual DbSet<PJT2> PJT2 { get; set; }
        public virtual DbSet<PKL1> PKL1 { get; set; }
        public virtual DbSet<PKL2> PKL2 { get; set; }
        public virtual DbSet<PMN5> PMN5 { get; set; }
        public virtual DbSet<PMV8> PMV8 { get; set; }
        public virtual DbSet<POR1> POR1 { get; set; }
        public virtual DbSet<POR10> POR10 { get; set; }
        public virtual DbSet<POR11> POR11 { get; set; }
        public virtual DbSet<POR12> POR12 { get; set; }
        public virtual DbSet<POR13> POR13 { get; set; }
        public virtual DbSet<POR14> POR14 { get; set; }
        public virtual DbSet<POR15> POR15 { get; set; }
        public virtual DbSet<POR16> POR16 { get; set; }
        public virtual DbSet<POR17> POR17 { get; set; }
        public virtual DbSet<POR18> POR18 { get; set; }
        public virtual DbSet<POR19> POR19 { get; set; }
        public virtual DbSet<POR2> POR2 { get; set; }
        public virtual DbSet<POR20> POR20 { get; set; }
        public virtual DbSet<POR3> POR3 { get; set; }
        public virtual DbSet<POR4> POR4 { get; set; }
        public virtual DbSet<POR5> POR5 { get; set; }
        public virtual DbSet<POR6> POR6 { get; set; }
        public virtual DbSet<POR7> POR7 { get; set; }
        public virtual DbSet<POR8> POR8 { get; set; }
        public virtual DbSet<POR9> POR9 { get; set; }
        public virtual DbSet<PQT1> PQT1 { get; set; }
        public virtual DbSet<PQT10> PQT10 { get; set; }
        public virtual DbSet<PQT11> PQT11 { get; set; }
        public virtual DbSet<PQT12> PQT12 { get; set; }
        public virtual DbSet<PQT13> PQT13 { get; set; }
        public virtual DbSet<PQT14> PQT14 { get; set; }
        public virtual DbSet<PQT15> PQT15 { get; set; }
        public virtual DbSet<PQT16> PQT16 { get; set; }
        public virtual DbSet<PQT17> PQT17 { get; set; }
        public virtual DbSet<PQT18> PQT18 { get; set; }
        public virtual DbSet<PQT19> PQT19 { get; set; }
        public virtual DbSet<PQT2> PQT2 { get; set; }
        public virtual DbSet<PQT20> PQT20 { get; set; }
        public virtual DbSet<PQT3> PQT3 { get; set; }
        public virtual DbSet<PQT4> PQT4 { get; set; }
        public virtual DbSet<PQT5> PQT5 { get; set; }
        public virtual DbSet<PQT6> PQT6 { get; set; }
        public virtual DbSet<PQT7> PQT7 { get; set; }
        public virtual DbSet<PQT8> PQT8 { get; set; }
        public virtual DbSet<PQT9> PQT9 { get; set; }
        public virtual DbSet<PQW1> PQW1 { get; set; }
        public virtual DbSet<PRQ1> PRQ1 { get; set; }
        public virtual DbSet<PRQ10> PRQ10 { get; set; }
        public virtual DbSet<PRQ11> PRQ11 { get; set; }
        public virtual DbSet<PRQ12> PRQ12 { get; set; }
        public virtual DbSet<PRQ13> PRQ13 { get; set; }
        public virtual DbSet<PRQ14> PRQ14 { get; set; }
        public virtual DbSet<PRQ15> PRQ15 { get; set; }
        public virtual DbSet<PRQ16> PRQ16 { get; set; }
        public virtual DbSet<PRQ17> PRQ17 { get; set; }
        public virtual DbSet<PRQ18> PRQ18 { get; set; }
        public virtual DbSet<PRQ19> PRQ19 { get; set; }
        public virtual DbSet<PRQ2> PRQ2 { get; set; }
        public virtual DbSet<PRQ20> PRQ20 { get; set; }
        public virtual DbSet<PRQ3> PRQ3 { get; set; }
        public virtual DbSet<PRQ4> PRQ4 { get; set; }
        public virtual DbSet<PRQ5> PRQ5 { get; set; }
        public virtual DbSet<PRQ6> PRQ6 { get; set; }
        public virtual DbSet<PRQ7> PRQ7 { get; set; }
        public virtual DbSet<PRQ8> PRQ8 { get; set; }
        public virtual DbSet<PRQ9> PRQ9 { get; set; }
        public virtual DbSet<PRS1> PRS1 { get; set; }
        public virtual DbSet<PUTR> PUTRs { get; set; }
        public virtual DbSet<PUTR1> PUTR1 { get; set; }
        public virtual DbSet<PWZ1> PWZ1 { get; set; }
        public virtual DbSet<PWZ2> PWZ2 { get; set; }
        public virtual DbSet<PWZ3> PWZ3 { get; set; }
        public virtual DbSet<PWZ4> PWZ4 { get; set; }
        public virtual DbSet<PWZ5> PWZ5 { get; set; }
        public virtual DbSet<PWZ6> PWZ6 { get; set; }
        public virtual DbSet<PYD1> PYD1 { get; set; }
        public virtual DbSet<PYM1> PYM1 { get; set; }
        public virtual DbSet<QUE1> QUE1 { get; set; }
        public virtual DbSet<QUE2> QUE2 { get; set; }
        public virtual DbSet<QUT1> QUT1 { get; set; }
        public virtual DbSet<QUT10> QUT10 { get; set; }
        public virtual DbSet<QUT11> QUT11 { get; set; }
        public virtual DbSet<QUT12> QUT12 { get; set; }
        public virtual DbSet<QUT13> QUT13 { get; set; }
        public virtual DbSet<QUT14> QUT14 { get; set; }
        public virtual DbSet<QUT15> QUT15 { get; set; }
        public virtual DbSet<QUT16> QUT16 { get; set; }
        public virtual DbSet<QUT17> QUT17 { get; set; }
        public virtual DbSet<QUT18> QUT18 { get; set; }
        public virtual DbSet<QUT19> QUT19 { get; set; }
        public virtual DbSet<QUT2> QUT2 { get; set; }
        public virtual DbSet<QUT20> QUT20 { get; set; }
        public virtual DbSet<QUT3> QUT3 { get; set; }
        public virtual DbSet<QUT4> QUT4 { get; set; }
        public virtual DbSet<QUT5> QUT5 { get; set; }
        public virtual DbSet<QUT6> QUT6 { get; set; }
        public virtual DbSet<QUT7> QUT7 { get; set; }
        public virtual DbSet<QUT8> QUT8 { get; set; }
        public virtual DbSet<QUT9> QUT9 { get; set; }
        public virtual DbSet<QWZ1> QWZ1 { get; set; }
        public virtual DbSet<QWZ2> QWZ2 { get; set; }
        public virtual DbSet<QWZ3> QWZ3 { get; set; }
        public virtual DbSet<RCC4> RCC4 { get; set; }
        public virtual DbSet<RCON> RCONs { get; set; }
        public virtual DbSet<RCR1> RCR1 { get; set; }
        public virtual DbSet<RCT1> RCT1 { get; set; }
        public virtual DbSet<RCT2> RCT2 { get; set; }
        public virtual DbSet<RCT3> RCT3 { get; set; }
        public virtual DbSet<RCT4> RCT4 { get; set; }
        public virtual DbSet<RCT5> RCT5 { get; set; }
        public virtual DbSet<RCT6> RCT6 { get; set; }
        public virtual DbSet<RCT7> RCT7 { get; set; }
        public virtual DbSet<RCT8> RCT8 { get; set; }
        public virtual DbSet<RDC1> RDC1 { get; set; }
        public virtual DbSet<RDFL> RDFLs { get; set; }
        public virtual DbSet<RDN1> RDN1 { get; set; }
        public virtual DbSet<RDN10> RDN10 { get; set; }
        public virtual DbSet<RDN11> RDN11 { get; set; }
        public virtual DbSet<RDN12> RDN12 { get; set; }
        public virtual DbSet<RDN13> RDN13 { get; set; }
        public virtual DbSet<RDN14> RDN14 { get; set; }
        public virtual DbSet<RDN15> RDN15 { get; set; }
        public virtual DbSet<RDN16> RDN16 { get; set; }
        public virtual DbSet<RDN17> RDN17 { get; set; }
        public virtual DbSet<RDN18> RDN18 { get; set; }
        public virtual DbSet<RDN19> RDN19 { get; set; }
        public virtual DbSet<RDN2> RDN2 { get; set; }
        public virtual DbSet<RDN20> RDN20 { get; set; }
        public virtual DbSet<RDN3> RDN3 { get; set; }
        public virtual DbSet<RDN4> RDN4 { get; set; }
        public virtual DbSet<RDN5> RDN5 { get; set; }
        public virtual DbSet<RDN6> RDN6 { get; set; }
        public virtual DbSet<RDN7> RDN7 { get; set; }
        public virtual DbSet<RDN8> RDN8 { get; set; }
        public virtual DbSet<RDN9> RDN9 { get; set; }
        public virtual DbSet<RDOC> RDOCs { get; set; }
        public virtual DbSet<RDR1> RDR1 { get; set; }
        public virtual DbSet<RDR10> RDR10 { get; set; }
        public virtual DbSet<RDR11> RDR11 { get; set; }
        public virtual DbSet<RDR12> RDR12 { get; set; }
        public virtual DbSet<RDR13> RDR13 { get; set; }
        public virtual DbSet<RDR14> RDR14 { get; set; }
        public virtual DbSet<RDR15> RDR15 { get; set; }
        public virtual DbSet<RDR16> RDR16 { get; set; }
        public virtual DbSet<RDR17> RDR17 { get; set; }
        public virtual DbSet<RDR18> RDR18 { get; set; }
        public virtual DbSet<RDR19> RDR19 { get; set; }
        public virtual DbSet<RDR2> RDR2 { get; set; }
        public virtual DbSet<RDR20> RDR20 { get; set; }
        public virtual DbSet<RDR3> RDR3 { get; set; }
        public virtual DbSet<RDR4> RDR4 { get; set; }
        public virtual DbSet<RDR5> RDR5 { get; set; }
        public virtual DbSet<RDR6> RDR6 { get; set; }
        public virtual DbSet<RDR7> RDR7 { get; set; }
        public virtual DbSet<RDR8> RDR8 { get; set; }
        public virtual DbSet<RDR9> RDR9 { get; set; }
        public virtual DbSet<REQ1> REQ1 { get; set; }
        public virtual DbSet<REQ2> REQ2 { get; set; }
        public virtual DbSet<REQ3> REQ3 { get; set; }
        public virtual DbSet<RIN1> RIN1 { get; set; }
        public virtual DbSet<RIN10> RIN10 { get; set; }
        public virtual DbSet<RIN11> RIN11 { get; set; }
        public virtual DbSet<RIN12> RIN12 { get; set; }
        public virtual DbSet<RIN13> RIN13 { get; set; }
        public virtual DbSet<RIN14> RIN14 { get; set; }
        public virtual DbSet<RIN15> RIN15 { get; set; }
        public virtual DbSet<RIN16> RIN16 { get; set; }
        public virtual DbSet<RIN17> RIN17 { get; set; }
        public virtual DbSet<RIN18> RIN18 { get; set; }
        public virtual DbSet<RIN19> RIN19 { get; set; }
        public virtual DbSet<RIN2> RIN2 { get; set; }
        public virtual DbSet<RIN20> RIN20 { get; set; }
        public virtual DbSet<RIN3> RIN3 { get; set; }
        public virtual DbSet<RIN4> RIN4 { get; set; }
        public virtual DbSet<RIN5> RIN5 { get; set; }
        public virtual DbSet<RIN6> RIN6 { get; set; }
        public virtual DbSet<RIN7> RIN7 { get; set; }
        public virtual DbSet<RIN8> RIN8 { get; set; }
        public virtual DbSet<RIN9> RIN9 { get; set; }
        public virtual DbSet<RIT1> RIT1 { get; set; }
        public virtual DbSet<RITM> RITMs { get; set; }
        public virtual DbSet<RLD1> RLD1 { get; set; }
        public virtual DbSet<RPC1> RPC1 { get; set; }
        public virtual DbSet<RPC10> RPC10 { get; set; }
        public virtual DbSet<RPC11> RPC11 { get; set; }
        public virtual DbSet<RPC12> RPC12 { get; set; }
        public virtual DbSet<RPC13> RPC13 { get; set; }
        public virtual DbSet<RPC14> RPC14 { get; set; }
        public virtual DbSet<RPC15> RPC15 { get; set; }
        public virtual DbSet<RPC16> RPC16 { get; set; }
        public virtual DbSet<RPC17> RPC17 { get; set; }
        public virtual DbSet<RPC18> RPC18 { get; set; }
        public virtual DbSet<RPC19> RPC19 { get; set; }
        public virtual DbSet<RPC2> RPC2 { get; set; }
        public virtual DbSet<RPC20> RPC20 { get; set; }
        public virtual DbSet<RPC3> RPC3 { get; set; }
        public virtual DbSet<RPC4> RPC4 { get; set; }
        public virtual DbSet<RPC5> RPC5 { get; set; }
        public virtual DbSet<RPC6> RPC6 { get; set; }
        public virtual DbSet<RPC7> RPC7 { get; set; }
        public virtual DbSet<RPC8> RPC8 { get; set; }
        public virtual DbSet<RPC9> RPC9 { get; set; }
        public virtual DbSet<RPD1> RPD1 { get; set; }
        public virtual DbSet<RPD10> RPD10 { get; set; }
        public virtual DbSet<RPD11> RPD11 { get; set; }
        public virtual DbSet<RPD12> RPD12 { get; set; }
        public virtual DbSet<RPD13> RPD13 { get; set; }
        public virtual DbSet<RPD14> RPD14 { get; set; }
        public virtual DbSet<RPD15> RPD15 { get; set; }
        public virtual DbSet<RPD16> RPD16 { get; set; }
        public virtual DbSet<RPD17> RPD17 { get; set; }
        public virtual DbSet<RPD18> RPD18 { get; set; }
        public virtual DbSet<RPD19> RPD19 { get; set; }
        public virtual DbSet<RPD2> RPD2 { get; set; }
        public virtual DbSet<RPD20> RPD20 { get; set; }
        public virtual DbSet<RPD3> RPD3 { get; set; }
        public virtual DbSet<RPD4> RPD4 { get; set; }
        public virtual DbSet<RPD5> RPD5 { get; set; }
        public virtual DbSet<RPD6> RPD6 { get; set; }
        public virtual DbSet<RPD7> RPD7 { get; set; }
        public virtual DbSet<RPD8> RPD8 { get; set; }
        public virtual DbSet<RPD9> RPD9 { get; set; }
        public virtual DbSet<RPR> RPRS { get; set; }
        public virtual DbSet<RSC1> RSC1 { get; set; }
        public virtual DbSet<RSC2> RSC2 { get; set; }
        public virtual DbSet<RTI1> RTI1 { get; set; }
        public virtual DbSet<RTI2> RTI2 { get; set; }
        public virtual DbSet<RTI3> RTI3 { get; set; }
        public virtual DbSet<RTM1> RTM1 { get; set; }
        public virtual DbSet<RTM2> RTM2 { get; set; }
        public virtual DbSet<RTW1> RTW1 { get; set; }
        public virtual DbSet<RTW2> RTW2 { get; set; }
        public virtual DbSet<RTYP> RTYPs { get; set; }
        public virtual DbSet<SAL1> SAL1 { get; set; }
        public virtual DbSet<SCL1> SCL1 { get; set; }
        public virtual DbSet<SCL2> SCL2 { get; set; }
        public virtual DbSet<SCL3> SCL3 { get; set; }
        public virtual DbSet<SCL4> SCL4 { get; set; }
        public virtual DbSet<SCL5> SCL5 { get; set; }
        public virtual DbSet<SCM1> SCM1 { get; set; }
        public virtual DbSet<SCM2> SCM2 { get; set; }
        public virtual DbSet<SCM3> SCM3 { get; set; }
        public virtual DbSet<SCR1> SCR1 { get; set; }
        public virtual DbSet<SCR2> SCR2 { get; set; }
        public virtual DbSet<SCR3> SCR3 { get; set; }
        public virtual DbSet<SDEX> SDEXes { get; set; }
        public virtual DbSet<SDI> SDIS { get; set; }
        public virtual DbSet<SHR1> SHR1 { get; set; }
        public virtual DbSet<SITM> SITMs { get; set; }
        public virtual DbSet<SITW> SITWs { get; set; }
        public virtual DbSet<SIVE> SIVEs { get; set; }
        public virtual DbSet<SIVK> SIVKs { get; set; }
        public virtual DbSet<SIVL> SIVLs { get; set; }
        public virtual DbSet<SIVL1> SIVL1 { get; set; }
        public virtual DbSet<SIVQ> SIVQs { get; set; }
        public virtual DbSet<SLM1> SLM1 { get; set; }
        public virtual DbSet<SLR1> SLR1 { get; set; }
        public virtual DbSet<SPP1> SPP1 { get; set; }
        public virtual DbSet<SPP2> SPP2 { get; set; }
        public virtual DbSet<SPRG> SPRGs { get; set; }
        public virtual DbSet<SQR1> SQR1 { get; set; }
        public virtual DbSet<SRA1> SRA1 { get; set; }
        public virtual DbSet<SRA2> SRA2 { get; set; }
        public virtual DbSet<SRA3> SRA3 { get; set; }
        public virtual DbSet<SRT1> SRT1 { get; set; }
        public virtual DbSet<SRT2> SRT2 { get; set; }
        public virtual DbSet<STA1> STA1 { get; set; }
        public virtual DbSet<STC1> STC1 { get; set; }
        public virtual DbSet<SVR1> SVR1 { get; set; }
        public virtual DbSet<TAX1> TAX1 { get; set; }
        public virtual DbSet<TCD1> TCD1 { get; set; }
        public virtual DbSet<TCD2> TCD2 { get; set; }
        public virtual DbSet<TCD3> TCD3 { get; set; }
        public virtual DbSet<TCD4> TCD4 { get; set; }
        public virtual DbSet<TCD5> TCD5 { get; set; }
        public virtual DbSet<TDR1> TDR1 { get; set; }
        public virtual DbSet<TFC1> TFC1 { get; set; }
        public virtual DbSet<TGG1> TGG1 { get; set; }
        public virtual DbSet<TMP1> TMP1 { get; set; }
        public virtual DbSet<TMP8> TMP8 { get; set; }
        public virtual DbSet<TNN1> TNN1 { get; set; }
        public virtual DbSet<TPI1> TPI1 { get; set; }
        public virtual DbSet<TPI2> TPI2 { get; set; }
        public virtual DbSet<TPL1> TPL1 { get; set; }
        public virtual DbSet<TPS1> TPS1 { get; set; }
        public virtual DbSet<TPS2> TPS2 { get; set; }
        public virtual DbSet<TPW1> TPW1 { get; set; }
        public virtual DbSet<TPW2> TPW2 { get; set; }
        public virtual DbSet<TPW3> TPW3 { get; set; }
        public virtual DbSet<TPW4> TPW4 { get; set; }
        public virtual DbSet<TPW5> TPW5 { get; set; }
        public virtual DbSet<TPW6> TPW6 { get; set; }
        public virtual DbSet<TRA1> TRA1 { get; set; }
        public virtual DbSet<TRN1> TRN1 { get; set; }
        public virtual DbSet<TRN2> TRN2 { get; set; }
        public virtual DbSet<TRS1> TRS1 { get; set; }
        public virtual DbSet<TRS2> TRS2 { get; set; }
        public virtual DbSet<TRT1> TRT1 { get; set; }
        public virtual DbSet<TSI1> TSI1 { get; set; }
        public virtual DbSet<TSI2> TSI2 { get; set; }
        public virtual DbSet<TXD1> TXD1 { get; set; }
        public virtual DbSet<UBTN> UBTNs { get; set; }
        public virtual DbSet<UBVL> UBVLs { get; set; }
        public virtual DbSet<UDG1> UDG1 { get; set; }
        public virtual DbSet<UDG2> UDG2 { get; set; }
        public virtual DbSet<UDO1> UDO1 { get; set; }
        public virtual DbSet<UDO2> UDO2 { get; set; }
        public virtual DbSet<UDO3> UDO3 { get; set; }
        public virtual DbSet<UDO4> UDO4 { get; set; }
        public virtual DbSet<UFD1> UFD1 { get; set; }
        public virtual DbSet<UGP1> UGP1 { get; set; }
        public virtual DbSet<UILM> UILMs { get; set; }
        public virtual DbSet<UILM1> UILM1 { get; set; }
        public virtual DbSet<UILM2> UILM2 { get; set; }
        public virtual DbSet<UITM> UITMs { get; set; }
        public virtual DbSet<UITW> UITWs { get; set; }
        public virtual DbSet<UIVE> UIVEs { get; set; }
        public virtual DbSet<UIVK> UIVKs { get; set; }
        public virtual DbSet<UIVL> UIVLs { get; set; }
        public virtual DbSet<UIVL1> UIVL1 { get; set; }
        public virtual DbSet<UIVQ> UIVQs { get; set; }
        public virtual DbSet<UKD1> UKD1 { get; set; }
        public virtual DbSet<UPT1> UPT1 { get; set; }
        public virtual DbSet<UQR1> UQR1 { get; set; }
        public virtual DbSet<USR1> USR1 { get; set; }
        public virtual DbSet<USR2> USR2 { get; set; }
        public virtual DbSet<USR3> USR3 { get; set; }
        public virtual DbSet<USR5> USR5 { get; set; }
        public virtual DbSet<USR6> USR6 { get; set; }
        public virtual DbSet<USRN> USRNs { get; set; }
        public virtual DbSet<UTX1> UTX1 { get; set; }
        public virtual DbSet<UWKO> UWKOes { get; set; }
        public virtual DbSet<UWKO1> UWKO1 { get; set; }
        public virtual DbSet<UWO2> UWO2 { get; set; }
        public virtual DbSet<UWOR> UWORs { get; set; }
        public virtual DbSet<UWOR1> UWOR1 { get; set; }
        public virtual DbSet<VIEW> VIEWS { get; set; }
        public virtual DbSet<VLG1> VLG1 { get; set; }
        public virtual DbSet<VPM1> VPM1 { get; set; }
        public virtual DbSet<VPM2> VPM2 { get; set; }
        public virtual DbSet<VPM3> VPM3 { get; set; }
        public virtual DbSet<VPM4> VPM4 { get; set; }
        public virtual DbSet<VPM5> VPM5 { get; set; }
        public virtual DbSet<VPM6> VPM6 { get; set; }
        public virtual DbSet<VPM7> VPM7 { get; set; }
        public virtual DbSet<VPM8> VPM8 { get; set; }
        public virtual DbSet<VRT1> VRT1 { get; set; }
        public virtual DbSet<VRT2> VRT2 { get; set; }
        public virtual DbSet<VRW1> VRW1 { get; set; }
        public virtual DbSet<VRW2> VRW2 { get; set; }
        public virtual DbSet<VRW3> VRW3 { get; set; }
        public virtual DbSet<VTG1> VTG1 { get; set; }
        public virtual DbSet<VTR1> VTR1 { get; set; }
        public virtual DbSet<VTR2> VTR2 { get; set; }
        public virtual DbSet<VTR3> VTR3 { get; set; }
        public virtual DbSet<WDD1> WDD1 { get; set; }
        public virtual DbSet<WDD2> WDD2 { get; set; }
        public virtual DbSet<WHT1> WHT1 { get; set; }
        public virtual DbSet<WHT2> WHT2 { get; set; }
        public virtual DbSet<WHT3> WHT3 { get; set; }
        public virtual DbSet<WKO1> WKO1 { get; set; }
        public virtual DbSet<WLS1> WLS1 { get; set; }
        public virtual DbSet<WLS2> WLS2 { get; set; }
        public virtual DbSet<WLS3> WLS3 { get; set; }
        public virtual DbSet<WLS4> WLS4 { get; set; }
        public virtual DbSet<WLS5> WLS5 { get; set; }
        public virtual DbSet<WOR1> WOR1 { get; set; }
        public virtual DbSet<WOR2> WOR2 { get; set; }
        public virtual DbSet<WOR2V> WOR2V { get; set; }
        public virtual DbSet<WST1> WST1 { get; set; }
        public virtual DbSet<WTM1> WTM1 { get; set; }
        public virtual DbSet<WTM2> WTM2 { get; set; }
        public virtual DbSet<WTM3> WTM3 { get; set; }
        public virtual DbSet<WTM4> WTM4 { get; set; }
        public virtual DbSet<WTM5> WTM5 { get; set; }
        public virtual DbSet<WTQ1> WTQ1 { get; set; }
        public virtual DbSet<WTQ10> WTQ10 { get; set; }
        public virtual DbSet<WTQ11> WTQ11 { get; set; }
        public virtual DbSet<WTQ12> WTQ12 { get; set; }
        public virtual DbSet<WTQ13> WTQ13 { get; set; }
        public virtual DbSet<WTQ14> WTQ14 { get; set; }
        public virtual DbSet<WTQ15> WTQ15 { get; set; }
        public virtual DbSet<WTQ16> WTQ16 { get; set; }
        public virtual DbSet<WTQ17> WTQ17 { get; set; }
        public virtual DbSet<WTQ18> WTQ18 { get; set; }
        public virtual DbSet<WTQ19> WTQ19 { get; set; }
        public virtual DbSet<WTQ2> WTQ2 { get; set; }
        public virtual DbSet<WTQ20> WTQ20 { get; set; }
        public virtual DbSet<WTQ3> WTQ3 { get; set; }
        public virtual DbSet<WTQ4> WTQ4 { get; set; }
        public virtual DbSet<WTQ5> WTQ5 { get; set; }
        public virtual DbSet<WTQ6> WTQ6 { get; set; }
        public virtual DbSet<WTQ7> WTQ7 { get; set; }
        public virtual DbSet<WTQ8> WTQ8 { get; set; }
        public virtual DbSet<WTQ9> WTQ9 { get; set; }
        public virtual DbSet<WTR1> WTR1 { get; set; }
        public virtual DbSet<WTR10> WTR10 { get; set; }
        public virtual DbSet<WTR11> WTR11 { get; set; }
        public virtual DbSet<WTR12> WTR12 { get; set; }
        public virtual DbSet<WTR13> WTR13 { get; set; }
        public virtual DbSet<WTR14> WTR14 { get; set; }
        public virtual DbSet<WTR15> WTR15 { get; set; }
        public virtual DbSet<WTR16> WTR16 { get; set; }
        public virtual DbSet<WTR17> WTR17 { get; set; }
        public virtual DbSet<WTR18> WTR18 { get; set; }
        public virtual DbSet<WTR19> WTR19 { get; set; }
        public virtual DbSet<WTR2> WTR2 { get; set; }
        public virtual DbSet<WTR20> WTR20 { get; set; }
        public virtual DbSet<WTR3> WTR3 { get; set; }
        public virtual DbSet<WTR4> WTR4 { get; set; }
        public virtual DbSet<WTR5> WTR5 { get; set; }
        public virtual DbSet<WTR6> WTR6 { get; set; }
        public virtual DbSet<WTR7> WTR7 { get; set; }
        public virtual DbSet<WTR8> WTR8 { get; set; }
        public virtual DbSet<WTR9> WTR9 { get; set; }
        public virtual DbSet<XRDBV> XRDBVs { get; set; }
        public virtual DbSet<XROBJ> XROBJs { get; set; }
        public virtual DbSet<XRREL> XRRELs { get; set; }
        public virtual DbSet<XRUDF> XRUDFs { get; set; }
        public virtual DbSet<XRXL> XRXLS { get; set; }
        public virtual DbSet<XRXML> XRXMLs { get; set; }
    
        public virtual int f_TmSp_AddIndexTmpMSN4()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_AddIndexTmpMSN4");
        }
    
        public virtual int f_TmSp_AfterUpdateAppObjLineOINM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_AfterUpdateAppObjLineOINM");
        }
    
        public virtual int f_TmSp_AliasUpdate_OUSR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_AliasUpdate_OUSR");
        }
    
        public virtual int f_TmSp_AliasUpdateAfter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_AliasUpdateAfter");
        }
    
        public virtual int f_TmSp_AliasUpdateBefore()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_AliasUpdateBefore");
        }
    
        public virtual int f_TmSp_ArchiveDateToOAIM(Nullable<System.DateTime> archiveDate)
        {
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("archiveDate", archiveDate) :
                new ObjectParameter("archiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ArchiveDateToOAIM", archiveDateParameter);
        }
    
        public virtual int f_TmSp_BeforeUpdateAppObjLineOINM(string compVersion)
        {
            var compVersionParameter = compVersion != null ?
                new ObjectParameter("compVersion", compVersion) :
                new ObjectParameter("compVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_BeforeUpdateAppObjLineOINM", compVersionParameter);
        }
    
        public virtual int f_TmSp_BinLocationContentDetailListCRPrint(Nullable<int> type, string binSublevels, string binAttributes, string binCodeFromTo, string itemCodeFromTo, string itemGroups, string batchFromTo, string serialFromTo, string binAbsSet, string batchAbs, string serialAbs, string whsCodeFromTo, Nullable<int> flag)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var binSublevelsParameter = binSublevels != null ?
                new ObjectParameter("binSublevels", binSublevels) :
                new ObjectParameter("binSublevels", typeof(string));
    
            var binAttributesParameter = binAttributes != null ?
                new ObjectParameter("binAttributes", binAttributes) :
                new ObjectParameter("binAttributes", typeof(string));
    
            var binCodeFromToParameter = binCodeFromTo != null ?
                new ObjectParameter("binCodeFromTo", binCodeFromTo) :
                new ObjectParameter("binCodeFromTo", typeof(string));
    
            var itemCodeFromToParameter = itemCodeFromTo != null ?
                new ObjectParameter("itemCodeFromTo", itemCodeFromTo) :
                new ObjectParameter("itemCodeFromTo", typeof(string));
    
            var itemGroupsParameter = itemGroups != null ?
                new ObjectParameter("itemGroups", itemGroups) :
                new ObjectParameter("itemGroups", typeof(string));
    
            var batchFromToParameter = batchFromTo != null ?
                new ObjectParameter("batchFromTo", batchFromTo) :
                new ObjectParameter("batchFromTo", typeof(string));
    
            var serialFromToParameter = serialFromTo != null ?
                new ObjectParameter("serialFromTo", serialFromTo) :
                new ObjectParameter("serialFromTo", typeof(string));
    
            var binAbsSetParameter = binAbsSet != null ?
                new ObjectParameter("binAbsSet", binAbsSet) :
                new ObjectParameter("binAbsSet", typeof(string));
    
            var batchAbsParameter = batchAbs != null ?
                new ObjectParameter("batchAbs", batchAbs) :
                new ObjectParameter("batchAbs", typeof(string));
    
            var serialAbsParameter = serialAbs != null ?
                new ObjectParameter("serialAbs", serialAbs) :
                new ObjectParameter("serialAbs", typeof(string));
    
            var whsCodeFromToParameter = whsCodeFromTo != null ?
                new ObjectParameter("whsCodeFromTo", whsCodeFromTo) :
                new ObjectParameter("whsCodeFromTo", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_BinLocationContentDetailListCRPrint", typeParameter, binSublevelsParameter, binAttributesParameter, binCodeFromToParameter, itemCodeFromToParameter, itemGroupsParameter, batchFromToParameter, serialFromToParameter, binAbsSetParameter, batchAbsParameter, serialAbsParameter, whsCodeFromToParameter, flagParameter);
        }
    
        public virtual int f_TmSp_BinLocationContentListCRPrint(Nullable<int> type, string binSublevels, string binAttributes, string binCodeFromTo, string itemCodeFromTo, string itemGroups, string batchFromTo, string serialFromTo, string binAbsSet, string batchAbs, string serialAbs, string whsCodeFromTo, Nullable<int> flag)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var binSublevelsParameter = binSublevels != null ?
                new ObjectParameter("binSublevels", binSublevels) :
                new ObjectParameter("binSublevels", typeof(string));
    
            var binAttributesParameter = binAttributes != null ?
                new ObjectParameter("binAttributes", binAttributes) :
                new ObjectParameter("binAttributes", typeof(string));
    
            var binCodeFromToParameter = binCodeFromTo != null ?
                new ObjectParameter("binCodeFromTo", binCodeFromTo) :
                new ObjectParameter("binCodeFromTo", typeof(string));
    
            var itemCodeFromToParameter = itemCodeFromTo != null ?
                new ObjectParameter("itemCodeFromTo", itemCodeFromTo) :
                new ObjectParameter("itemCodeFromTo", typeof(string));
    
            var itemGroupsParameter = itemGroups != null ?
                new ObjectParameter("itemGroups", itemGroups) :
                new ObjectParameter("itemGroups", typeof(string));
    
            var batchFromToParameter = batchFromTo != null ?
                new ObjectParameter("batchFromTo", batchFromTo) :
                new ObjectParameter("batchFromTo", typeof(string));
    
            var serialFromToParameter = serialFromTo != null ?
                new ObjectParameter("serialFromTo", serialFromTo) :
                new ObjectParameter("serialFromTo", typeof(string));
    
            var binAbsSetParameter = binAbsSet != null ?
                new ObjectParameter("binAbsSet", binAbsSet) :
                new ObjectParameter("binAbsSet", typeof(string));
    
            var batchAbsParameter = batchAbs != null ?
                new ObjectParameter("batchAbs", batchAbs) :
                new ObjectParameter("batchAbs", typeof(string));
    
            var serialAbsParameter = serialAbs != null ?
                new ObjectParameter("serialAbs", serialAbs) :
                new ObjectParameter("serialAbs", typeof(string));
    
            var whsCodeFromToParameter = whsCodeFromTo != null ?
                new ObjectParameter("whsCodeFromTo", whsCodeFromTo) :
                new ObjectParameter("whsCodeFromTo", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_BinLocationContentListCRPrint", typeParameter, binSublevelsParameter, binAttributesParameter, binCodeFromToParameter, itemCodeFromToParameter, itemGroupsParameter, batchFromToParameter, serialFromToParameter, binAbsSetParameter, batchAbsParameter, serialAbsParameter, whsCodeFromToParameter, flagParameter);
        }
    
        public virtual int f_TmSp_BinLocationListCRPrint(Nullable<int> type, string binSublevels, string binAttributes, string binCodeFromTo, string itemCodeFromTo, string itemGroups, string batchFromTo, string serialFromTo, string binAbsSet, string batchAbs, string serialAbs, string whsCodeFromTo, Nullable<int> flag)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var binSublevelsParameter = binSublevels != null ?
                new ObjectParameter("binSublevels", binSublevels) :
                new ObjectParameter("binSublevels", typeof(string));
    
            var binAttributesParameter = binAttributes != null ?
                new ObjectParameter("binAttributes", binAttributes) :
                new ObjectParameter("binAttributes", typeof(string));
    
            var binCodeFromToParameter = binCodeFromTo != null ?
                new ObjectParameter("binCodeFromTo", binCodeFromTo) :
                new ObjectParameter("binCodeFromTo", typeof(string));
    
            var itemCodeFromToParameter = itemCodeFromTo != null ?
                new ObjectParameter("itemCodeFromTo", itemCodeFromTo) :
                new ObjectParameter("itemCodeFromTo", typeof(string));
    
            var itemGroupsParameter = itemGroups != null ?
                new ObjectParameter("itemGroups", itemGroups) :
                new ObjectParameter("itemGroups", typeof(string));
    
            var batchFromToParameter = batchFromTo != null ?
                new ObjectParameter("batchFromTo", batchFromTo) :
                new ObjectParameter("batchFromTo", typeof(string));
    
            var serialFromToParameter = serialFromTo != null ?
                new ObjectParameter("serialFromTo", serialFromTo) :
                new ObjectParameter("serialFromTo", typeof(string));
    
            var binAbsSetParameter = binAbsSet != null ?
                new ObjectParameter("binAbsSet", binAbsSet) :
                new ObjectParameter("binAbsSet", typeof(string));
    
            var batchAbsParameter = batchAbs != null ?
                new ObjectParameter("batchAbs", batchAbs) :
                new ObjectParameter("batchAbs", typeof(string));
    
            var serialAbsParameter = serialAbs != null ?
                new ObjectParameter("serialAbs", serialAbs) :
                new ObjectParameter("serialAbs", typeof(string));
    
            var whsCodeFromToParameter = whsCodeFromTo != null ?
                new ObjectParameter("whsCodeFromTo", whsCodeFromTo) :
                new ObjectParameter("whsCodeFromTo", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_BinLocationListCRPrint", typeParameter, binSublevelsParameter, binAttributesParameter, binCodeFromToParameter, itemCodeFromToParameter, itemGroupsParameter, batchFromToParameter, serialFromToParameter, binAbsSetParameter, batchAbsParameter, serialAbsParameter, whsCodeFromToParameter, flagParameter);
        }
    
        public virtual int f_TmSp_ChangeColumnToNotNull(string tableName, string columnName, string defaultValue)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("defaultValue", defaultValue) :
                new ObjectParameter("defaultValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ChangeColumnToNotNull", tableNameParameter, columnNameParameter, defaultValueParameter);
        }
    
        public virtual int f_TmSp_ControlAccountUpgrade_OCRD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ControlAccountUpgrade_OCRD");
        }
    
        public virtual int f_TmSp_ConvertBRLCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ConvertBRLCurrency");
        }
    
        public virtual int f_TmSp_ConvertGrpLine_OACT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ConvertGrpLine_OACT");
        }
    
        public virtual int f_TmSp_CorrectWrongDocLineNumberInOINMForIPF()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CorrectWrongDocLineNumberInOINMForIPF");
        }
    
        public virtual int f_TmSp_CreateGetCompanyTimeFunction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateGetCompanyTimeFunction");
        }
    
        public virtual int f_TmSp_CreateOILMBuildIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOILMBuildIndexes");
        }
    
        public virtual int f_TmSp_CreateOilmOivlUpdateLandedCostIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOilmOivlUpdateLandedCostIndexes");
        }
    
        public virtual int f_TmSp_CreateOILMRevalBasedDocsIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOILMRevalBasedDocsIndexes");
        }
    
        public virtual int f_TmSp_CreateOINMGrouped()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOINMGrouped");
        }
    
        public virtual int f_TmSp_CreateOIVEInsertIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOIVEInsertIndexes");
        }
    
        public virtual int f_TmSp_CreateOIVLBuildIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOIVLBuildIndexes");
        }
    
        public virtual int f_TmSp_CreateOIVQInsertIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateOIVQInsertIndexes");
        }
    
        public virtual int f_TmSp_CreateViewB1_ActivityView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_ActivityView");
        }
    
        public virtual int f_TmSp_CreateViewB1_ActivityWithServiceCallsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_ActivityWithServiceCallsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_BasedDocsVatView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_BasedDocsVatView");
        }
    
        public virtual int f_TmSp_CreateViewB1_Doc12AddressView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_Doc12AddressView");
        }
    
        public virtual int f_TmSp_CreateViewB1_DocInstallmentsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_DocInstallmentsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_DocLineView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_DocLineView");
        }
    
        public virtual int f_TmSp_CreateViewB1_DocLinkedDownpaymentsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_DocLinkedDownpaymentsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_InvPostListILWithBinView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_InvPostListILWithBinView");
        }
    
        public virtual int f_TmSp_CreateViewB1_InvPostListILWithoutBinView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_InvPostListILWithoutBinView");
        }
    
        public virtual int f_TmSp_CreateViewB1_JournalTransSourceView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_JournalTransSourceView");
        }
    
        public virtual int f_TmSp_CreateViewB1_MarketingDocumentsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_MarketingDocumentsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_NLAuditFileOpeningDocView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_NLAuditFileOpeningDocView");
        }
    
        public virtual int f_TmSp_CreateViewB1_OinmWithBinTransfer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_OinmWithBinTransfer");
        }
    
        public virtual int f_TmSp_CreateViewB1_OOCRView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_OOCRView");
        }
    
        public virtual int f_TmSp_CreateViewB1_PaymentsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_PaymentsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnB1stAllocDocView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnB1stAllocDocView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBAllocateDocView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBAllocateDocView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOITL1OnhCnlView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOITL1OnhCnlView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOpenQtyInnerView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOpenQtyInnerView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOpenQtyInnerViewAlloc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOpenQtyInnerViewAlloc");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOpenQtyView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOpenQtyView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOpenQtyViewAlloc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOpenQtyViewAlloc");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBOpenQtyViewForWTR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBOpenQtyViewForWTR");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBReallocDocPathsView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBReallocDocPathsView");
        }
    
        public virtual int f_TmSp_CreateViewB1_SnBTransRptFirstBinView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_SnBTransRptFirstBinView");
        }
    
        public virtual int f_TmSp_CreateViewB1_VatAcctView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_VatAcctView");
        }
    
        public virtual int f_TmSp_CreateViewB1_VatView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewB1_VatView");
        }
    
        public virtual int f_TmSp_CreateViewDOC1_View()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewDOC1_View");
        }
    
        public virtual int f_TmSp_CreateViewIBT1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewIBT1");
        }
    
        public virtual int f_TmSp_CreateViewOIBT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewOIBT");
        }
    
        public virtual int f_TmSp_CreateViewOINM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewOINM");
        }
    
        public virtual int f_TmSp_CreateViewOSRD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewOSRD");
        }
    
        public virtual int f_TmSp_CreateViewOSRI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewOSRI");
        }
    
        public virtual int f_TmSp_CreateViewSINM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewSINM");
        }
    
        public virtual int f_TmSp_CreateViewSRI1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_CreateViewSRI1");
        }
    
        public virtual int f_TmSp_ExpnsUpdateOnDocs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ExpnsUpdateOnDocs");
        }
    
        public virtual int f_TmSp_FormattedSearchUpdate(Nullable<int> ui01, Nullable<int> ui02, Nullable<int> ui03, Nullable<int> ui04, Nullable<int> ui05, Nullable<int> ui06, Nullable<int> ui07, Nullable<int> ui08, Nullable<int> ui09, Nullable<int> ui10, Nullable<int> ui11, Nullable<int> ui12, Nullable<int> ui13, Nullable<int> ui14, Nullable<int> ui15, Nullable<int> ui16, Nullable<int> ui17, Nullable<int> ui18, Nullable<int> ui19, Nullable<int> ui20, Nullable<int> ui21, Nullable<int> ui22, Nullable<int> ui23, Nullable<int> ui24, Nullable<int> ui25, Nullable<int> ui26, Nullable<int> ui27, Nullable<int> ui28, Nullable<int> ui29)
        {
            var ui01Parameter = ui01.HasValue ?
                new ObjectParameter("ui01", ui01) :
                new ObjectParameter("ui01", typeof(int));
    
            var ui02Parameter = ui02.HasValue ?
                new ObjectParameter("ui02", ui02) :
                new ObjectParameter("ui02", typeof(int));
    
            var ui03Parameter = ui03.HasValue ?
                new ObjectParameter("ui03", ui03) :
                new ObjectParameter("ui03", typeof(int));
    
            var ui04Parameter = ui04.HasValue ?
                new ObjectParameter("ui04", ui04) :
                new ObjectParameter("ui04", typeof(int));
    
            var ui05Parameter = ui05.HasValue ?
                new ObjectParameter("ui05", ui05) :
                new ObjectParameter("ui05", typeof(int));
    
            var ui06Parameter = ui06.HasValue ?
                new ObjectParameter("ui06", ui06) :
                new ObjectParameter("ui06", typeof(int));
    
            var ui07Parameter = ui07.HasValue ?
                new ObjectParameter("ui07", ui07) :
                new ObjectParameter("ui07", typeof(int));
    
            var ui08Parameter = ui08.HasValue ?
                new ObjectParameter("ui08", ui08) :
                new ObjectParameter("ui08", typeof(int));
    
            var ui09Parameter = ui09.HasValue ?
                new ObjectParameter("ui09", ui09) :
                new ObjectParameter("ui09", typeof(int));
    
            var ui10Parameter = ui10.HasValue ?
                new ObjectParameter("ui10", ui10) :
                new ObjectParameter("ui10", typeof(int));
    
            var ui11Parameter = ui11.HasValue ?
                new ObjectParameter("ui11", ui11) :
                new ObjectParameter("ui11", typeof(int));
    
            var ui12Parameter = ui12.HasValue ?
                new ObjectParameter("ui12", ui12) :
                new ObjectParameter("ui12", typeof(int));
    
            var ui13Parameter = ui13.HasValue ?
                new ObjectParameter("ui13", ui13) :
                new ObjectParameter("ui13", typeof(int));
    
            var ui14Parameter = ui14.HasValue ?
                new ObjectParameter("ui14", ui14) :
                new ObjectParameter("ui14", typeof(int));
    
            var ui15Parameter = ui15.HasValue ?
                new ObjectParameter("ui15", ui15) :
                new ObjectParameter("ui15", typeof(int));
    
            var ui16Parameter = ui16.HasValue ?
                new ObjectParameter("ui16", ui16) :
                new ObjectParameter("ui16", typeof(int));
    
            var ui17Parameter = ui17.HasValue ?
                new ObjectParameter("ui17", ui17) :
                new ObjectParameter("ui17", typeof(int));
    
            var ui18Parameter = ui18.HasValue ?
                new ObjectParameter("ui18", ui18) :
                new ObjectParameter("ui18", typeof(int));
    
            var ui19Parameter = ui19.HasValue ?
                new ObjectParameter("ui19", ui19) :
                new ObjectParameter("ui19", typeof(int));
    
            var ui20Parameter = ui20.HasValue ?
                new ObjectParameter("ui20", ui20) :
                new ObjectParameter("ui20", typeof(int));
    
            var ui21Parameter = ui21.HasValue ?
                new ObjectParameter("ui21", ui21) :
                new ObjectParameter("ui21", typeof(int));
    
            var ui22Parameter = ui22.HasValue ?
                new ObjectParameter("ui22", ui22) :
                new ObjectParameter("ui22", typeof(int));
    
            var ui23Parameter = ui23.HasValue ?
                new ObjectParameter("ui23", ui23) :
                new ObjectParameter("ui23", typeof(int));
    
            var ui24Parameter = ui24.HasValue ?
                new ObjectParameter("ui24", ui24) :
                new ObjectParameter("ui24", typeof(int));
    
            var ui25Parameter = ui25.HasValue ?
                new ObjectParameter("ui25", ui25) :
                new ObjectParameter("ui25", typeof(int));
    
            var ui26Parameter = ui26.HasValue ?
                new ObjectParameter("ui26", ui26) :
                new ObjectParameter("ui26", typeof(int));
    
            var ui27Parameter = ui27.HasValue ?
                new ObjectParameter("ui27", ui27) :
                new ObjectParameter("ui27", typeof(int));
    
            var ui28Parameter = ui28.HasValue ?
                new ObjectParameter("ui28", ui28) :
                new ObjectParameter("ui28", typeof(int));
    
            var ui29Parameter = ui29.HasValue ?
                new ObjectParameter("ui29", ui29) :
                new ObjectParameter("ui29", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_FormattedSearchUpdate", ui01Parameter, ui02Parameter, ui03Parameter, ui04Parameter, ui05Parameter, ui06Parameter, ui07Parameter, ui08Parameter, ui09Parameter, ui10Parameter, ui11Parameter, ui12Parameter, ui13Parameter, ui14Parameter, ui15Parameter, ui16Parameter, ui17Parameter, ui18Parameter, ui19Parameter, ui20Parameter, ui21Parameter, ui22Parameter, ui23Parameter, ui24Parameter, ui25Parameter, ui26Parameter, ui27Parameter, ui28Parameter, ui29Parameter);
        }
    
        public virtual int f_TmSp_MakeUnique_ACRD_DocEntryLogInstance(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_MakeUnique_ACRD_DocEntryLogInstance", tableNameParameter);
        }
    
        public virtual int f_TmSp_MthDate_Update_JDT1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_MthDate_Update_JDT1");
        }
    
        public virtual int f_TmSp_ReconUpgFillInTempJDT1(string tempJDT1Table, string tempBPTable)
        {
            var tempJDT1TableParameter = tempJDT1Table != null ?
                new ObjectParameter("tempJDT1Table", tempJDT1Table) :
                new ObjectParameter("tempJDT1Table", typeof(string));
    
            var tempBPTableParameter = tempBPTable != null ?
                new ObjectParameter("tempBPTable", tempBPTable) :
                new ObjectParameter("tempBPTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ReconUpgFillInTempJDT1", tempJDT1TableParameter, tempBPTableParameter);
        }
    
        public virtual int f_TmSp_RecoverILMofUpgradedLacCS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RecoverILMofUpgradedLacCS");
        }
    
        public virtual int f_TmSp_RemoveOILMBuildIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOILMBuildIndexes");
        }
    
        public virtual int f_TmSp_RemoveOilmOivlUpdateLandedCostIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOilmOivlUpdateLandedCostIndexes");
        }
    
        public virtual int f_TmSp_RemoveOILMRevalBasedDocsIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOILMRevalBasedDocsIndexes");
        }
    
        public virtual int f_TmSp_RemoveOINMGrouped()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOINMGrouped");
        }
    
        public virtual int f_TmSp_RemoveOIVEInsertIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOIVEInsertIndexes");
        }
    
        public virtual int f_TmSp_RemoveOIVLBuildIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOIVLBuildIndexes");
        }
    
        public virtual int f_TmSp_RemoveOIVQInsertIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RemoveOIVQInsertIndexes");
        }
    
        public virtual int f_TmSp_RestoreIsCommited_OIBT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_RestoreIsCommited_OIBT");
        }
    
        public virtual int f_TmSp_SetCategoryAtOFPR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetCategoryAtOFPR");
        }
    
        public virtual int f_TmSp_SetLineNumAtADO3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetLineNumAtADO3");
        }
    
        public virtual int f_TmSp_SetLineNumAtDOC3(string @object)
        {
            var objectParameter = @object != null ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetLineNumAtDOC3", objectParameter);
        }
    
        public virtual int f_TmSp_SetLineNumAtDOC5(string @object)
        {
            var objectParameter = @object != null ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetLineNumAtDOC5", objectParameter);
        }
    
        public virtual int f_TmSp_SetLineSeqAtDOC4(string @object)
        {
            var objectParameter = @object != null ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetLineSeqAtDOC4", objectParameter);
        }
    
        public virtual int f_TmSp_SetLineSeqAtPMN5(string @object)
        {
            var objectParameter = @object != null ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetLineSeqAtPMN5", objectParameter);
        }
    
        public virtual int f_TmSp_SetUniqueDocEntryAtOCRD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_SetUniqueDocEntryAtOCRD");
        }
    
        public virtual int f_TmSp_ShekelUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_ShekelUpdate");
        }
    
        public virtual int f_TmSp_TableRename(string oldTableName, string newTableName)
        {
            var oldTableNameParameter = oldTableName != null ?
                new ObjectParameter("oldTableName", oldTableName) :
                new ObjectParameter("oldTableName", typeof(string));
    
            var newTableNameParameter = newTableName != null ?
                new ObjectParameter("newTableName", newTableName) :
                new ObjectParameter("newTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_TableRename", oldTableNameParameter, newTableNameParameter);
        }
    
        public virtual int f_TmSp_UpdateAppObjLineOINM_DupBackFlushItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpdateAppObjLineOINM_DupBackFlushItems");
        }
    
        public virtual int f_TmSp_UpdateCreateDateOnOINM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpdateCreateDateOnOINM");
        }
    
        public virtual int f_TmSp_UpdateDoubleName(string table, string groupfield)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var groupfieldParameter = groupfield != null ?
                new ObjectParameter("groupfield", groupfield) :
                new ObjectParameter("groupfield", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpdateDoubleName", tableParameter, groupfieldParameter);
        }
    
        public virtual int f_TmSp_UpdateSubLineNumOILMAndOIVL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpdateSubLineNumOILMAndOIVL");
        }
    
        public virtual int f_TmSp_UpdateSubLineNumOINM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpdateSubLineNumOINM");
        }
    
        public virtual int f_TmSp_UpgradeDocLineNuminOINMforWKO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradeDocLineNuminOINMforWKO");
        }
    
        public virtual int f_tmsp_upgradefilloilmrevalbaseddocsquantity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_tmsp_upgradefilloilmrevalbaseddocsquantity");
        }
    
        public virtual int f_tmsp_upgradeilmtotalscforbackflushchild()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_tmsp_upgradeilmtotalscforbackflushchild");
        }
    
        public virtual int f_TmSp_UpgradeImportExportProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradeImportExportProcess");
        }
    
        public virtual int f_TmSp_UpgradeOIPFVersionNum()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradeOIPFVersionNum");
        }
    
        public virtual int f_TmSp_UpgradeOIVLNonBaseDocsUpdateAllocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradeOIVLNonBaseDocsUpdateAllocation");
        }
    
        public virtual int f_TmSp_UpgradeOIVLPriceAPInvoiceOnGRPO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradeOIVLPriceAPInvoiceOnGRPO");
        }
    
        public virtual int f_TmSp_UpgradePCH1RPC1StockSumforND(Nullable<int> objID)
        {
            var objIDParameter = objID.HasValue ?
                new ObjectParameter("objID", objID) :
                new ObjectParameter("objID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_UpgradePCH1RPC1StockSumforND", objIDParameter);
        }
    
        public virtual int f_TmSp_VariableUpdate_OUQR()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_VariableUpdate_OUQR");
        }
    
        public virtual int f_TmSp_VatSumCalc(string obj, string field)
        {
            var objParameter = obj != null ?
                new ObjectParameter("obj", obj) :
                new ObjectParameter("obj", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_TmSp_VatSumCalc", objParameter, fieldParameter);
        }
    
        public virtual int SBO_GetNextAutoKey(string objectID, string advance)
        {
            var objectIDParameter = objectID != null ?
                new ObjectParameter("objectID", objectID) :
                new ObjectParameter("objectID", typeof(string));
    
            var advanceParameter = advance != null ?
                new ObjectParameter("advance", advance) :
                new ObjectParameter("advance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SBO_GetNextAutoKey", objectIDParameter, advanceParameter);
        }
    
        public virtual ObjectResult<SBO_SP_PostTransactionNotice_Result> SBO_SP_PostTransactionNotice(string object_type, string transaction_type, Nullable<int> num_of_cols_in_key, string list_of_key_cols_tab_del, string list_of_cols_val_tab_del)
        {
            var object_typeParameter = object_type != null ?
                new ObjectParameter("object_type", object_type) :
                new ObjectParameter("object_type", typeof(string));
    
            var transaction_typeParameter = transaction_type != null ?
                new ObjectParameter("transaction_type", transaction_type) :
                new ObjectParameter("transaction_type", typeof(string));
    
            var num_of_cols_in_keyParameter = num_of_cols_in_key.HasValue ?
                new ObjectParameter("num_of_cols_in_key", num_of_cols_in_key) :
                new ObjectParameter("num_of_cols_in_key", typeof(int));
    
            var list_of_key_cols_tab_delParameter = list_of_key_cols_tab_del != null ?
                new ObjectParameter("list_of_key_cols_tab_del", list_of_key_cols_tab_del) :
                new ObjectParameter("list_of_key_cols_tab_del", typeof(string));
    
            var list_of_cols_val_tab_delParameter = list_of_cols_val_tab_del != null ?
                new ObjectParameter("list_of_cols_val_tab_del", list_of_cols_val_tab_del) :
                new ObjectParameter("list_of_cols_val_tab_del", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SBO_SP_PostTransactionNotice_Result>("SBO_SP_PostTransactionNotice", object_typeParameter, transaction_typeParameter, num_of_cols_in_keyParameter, list_of_key_cols_tab_delParameter, list_of_cols_val_tab_delParameter);
        }
    
        public virtual ObjectResult<SBO_SP_TransactionNotification_Result> SBO_SP_TransactionNotification(string object_type, string transaction_type, Nullable<int> num_of_cols_in_key, string list_of_key_cols_tab_del, string list_of_cols_val_tab_del)
        {
            var object_typeParameter = object_type != null ?
                new ObjectParameter("object_type", object_type) :
                new ObjectParameter("object_type", typeof(string));
    
            var transaction_typeParameter = transaction_type != null ?
                new ObjectParameter("transaction_type", transaction_type) :
                new ObjectParameter("transaction_type", typeof(string));
    
            var num_of_cols_in_keyParameter = num_of_cols_in_key.HasValue ?
                new ObjectParameter("num_of_cols_in_key", num_of_cols_in_key) :
                new ObjectParameter("num_of_cols_in_key", typeof(int));
    
            var list_of_key_cols_tab_delParameter = list_of_key_cols_tab_del != null ?
                new ObjectParameter("list_of_key_cols_tab_del", list_of_key_cols_tab_del) :
                new ObjectParameter("list_of_key_cols_tab_del", typeof(string));
    
            var list_of_cols_val_tab_delParameter = list_of_cols_val_tab_del != null ?
                new ObjectParameter("list_of_cols_val_tab_del", list_of_cols_val_tab_del) :
                new ObjectParameter("list_of_cols_val_tab_del", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SBO_SP_TransactionNotification_Result>("SBO_SP_TransactionNotification", object_typeParameter, transaction_typeParameter, num_of_cols_in_keyParameter, list_of_key_cols_tab_delParameter, list_of_cols_val_tab_delParameter);
        }
    
        public virtual int TmSp_adding_To_OITW(string sourceDB, string utilityDB)
        {
            var sourceDBParameter = sourceDB != null ?
                new ObjectParameter("SourceDB", sourceDB) :
                new ObjectParameter("SourceDB", typeof(string));
    
            var utilityDBParameter = utilityDB != null ?
                new ObjectParameter("UtilityDB", utilityDB) :
                new ObjectParameter("UtilityDB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_adding_To_OITW", sourceDBParameter, utilityDBParameter);
        }
    
        public virtual int TmSp_AddSqlUser(string uName, string uPwd)
        {
            var uNameParameter = uName != null ?
                new ObjectParameter("uName", uName) :
                new ObjectParameter("uName", typeof(string));
    
            var uPwdParameter = uPwd != null ?
                new ObjectParameter("uPwd", uPwd) :
                new ObjectParameter("uPwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_AddSqlUser", uNameParameter, uPwdParameter);
        }
    
        public virtual int TmSp_ArcCreateDistinctTmpArc(string tmpArcName)
        {
            var tmpArcNameParameter = tmpArcName != null ?
                new ObjectParameter("TmpArcName", tmpArcName) :
                new ObjectParameter("TmpArcName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ArcCreateDistinctTmpArc", tmpArcNameParameter);
        }
    
        public virtual int TmSp_ArcCreateIndexesForArc(string tablePID, ObjectParameter tmpArcTableName, ObjectParameter tmpArcBackTableName)
        {
            var tablePIDParameter = tablePID != null ?
                new ObjectParameter("TablePID", tablePID) :
                new ObjectParameter("TablePID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ArcCreateIndexesForArc", tablePIDParameter, tmpArcTableName, tmpArcBackTableName);
        }
    
        public virtual int TmSp_ArcIVIDBHealthCheck(Nullable<double> uSD_Rate)
        {
            var uSD_RateParameter = uSD_Rate.HasValue ?
                new ObjectParameter("USD_Rate", uSD_Rate) :
                new ObjectParameter("USD_Rate", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ArcIVIDBHealthCheck", uSD_RateParameter);
        }
    
        public virtual int TmSp_ArcProcess(string tablePID)
        {
            var tablePIDParameter = tablePID != null ?
                new ObjectParameter("TablePID", tablePID) :
                new ObjectParameter("TablePID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ArcProcess", tablePIDParameter);
        }
    
        public virtual int TmSp_ArcSaveArchivedProductionRecords(string in_TDAR_name, string in_Object)
        {
            var in_TDAR_nameParameter = in_TDAR_name != null ?
                new ObjectParameter("in_TDAR_name", in_TDAR_name) :
                new ObjectParameter("in_TDAR_name", typeof(string));
    
            var in_ObjectParameter = in_Object != null ?
                new ObjectParameter("in_Object", in_Object) :
                new ObjectParameter("in_Object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ArcSaveArchivedProductionRecords", in_TDAR_nameParameter, in_ObjectParameter);
        }
    
        public virtual int TmSp_B1CFLDeployFunctions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_B1CFLDeployFunctions");
        }
    
        public virtual int TmSp_B1CFLGetDocuments(string nvFrom, string nvTo, string docViewName, Nullable<short> predictDueDate, Nullable<short> useDelay, Nullable<short> inclRecurrTrans, string tempORCLName)
        {
            var nvFromParameter = nvFrom != null ?
                new ObjectParameter("nvFrom", nvFrom) :
                new ObjectParameter("nvFrom", typeof(string));
    
            var nvToParameter = nvTo != null ?
                new ObjectParameter("nvTo", nvTo) :
                new ObjectParameter("nvTo", typeof(string));
    
            var docViewNameParameter = docViewName != null ?
                new ObjectParameter("docViewName", docViewName) :
                new ObjectParameter("docViewName", typeof(string));
    
            var predictDueDateParameter = predictDueDate.HasValue ?
                new ObjectParameter("predictDueDate", predictDueDate) :
                new ObjectParameter("predictDueDate", typeof(short));
    
            var useDelayParameter = useDelay.HasValue ?
                new ObjectParameter("useDelay", useDelay) :
                new ObjectParameter("useDelay", typeof(short));
    
            var inclRecurrTransParameter = inclRecurrTrans.HasValue ?
                new ObjectParameter("inclRecurrTrans", inclRecurrTrans) :
                new ObjectParameter("inclRecurrTrans", typeof(short));
    
            var tempORCLNameParameter = tempORCLName != null ?
                new ObjectParameter("tempORCLName", tempORCLName) :
                new ObjectParameter("tempORCLName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_B1CFLGetDocuments", nvFromParameter, nvToParameter, docViewNameParameter, predictDueDateParameter, useDelayParameter, inclRecurrTransParameter, tempORCLNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TmSp_BOM_IsFather(string father, string son)
        {
            var fatherParameter = father != null ?
                new ObjectParameter("father", father) :
                new ObjectParameter("father", typeof(string));
    
            var sonParameter = son != null ?
                new ObjectParameter("son", son) :
                new ObjectParameter("son", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TmSp_BOM_IsFather", fatherParameter, sonParameter);
        }
    
        public virtual int TmSp_BOM_IsFather_Group(string son)
        {
            var sonParameter = son != null ?
                new ObjectParameter("son", son) :
                new ObjectParameter("son", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_BOM_IsFather_Group", sonParameter);
        }
    
        public virtual ObjectResult<TmSp_ChooseCIN4Correction_Result> TmSp_ChooseCIN4Correction(string card, string type, string curr)
        {
            var cardParameter = card != null ?
                new ObjectParameter("card", card) :
                new ObjectParameter("card", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var currParameter = curr != null ?
                new ObjectParameter("curr", curr) :
                new ObjectParameter("curr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_ChooseCIN4Correction_Result>("TmSp_ChooseCIN4Correction", cardParameter, typeParameter, currParameter);
        }
    
        public virtual ObjectResult<TmSp_ChooseINV4Correction_Result> TmSp_ChooseINV4Correction(string card, string type, string curr)
        {
            var cardParameter = card != null ?
                new ObjectParameter("card", card) :
                new ObjectParameter("card", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var currParameter = curr != null ?
                new ObjectParameter("curr", curr) :
                new ObjectParameter("curr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_ChooseINV4Correction_Result>("TmSp_ChooseINV4Correction", cardParameter, typeParameter, currParameter);
        }
    
        public virtual int TmSp_ConGrpLine_OACT_recurs(string acct1, Nullable<int> line, Nullable<byte> counter, Nullable<int> errNum)
        {
            var acct1Parameter = acct1 != null ?
                new ObjectParameter("acct1", acct1) :
                new ObjectParameter("acct1", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("line", line) :
                new ObjectParameter("line", typeof(int));
    
            var counterParameter = counter.HasValue ?
                new ObjectParameter("counter", counter) :
                new ObjectParameter("counter", typeof(byte));
    
            var errNumParameter = errNum.HasValue ?
                new ObjectParameter("ErrNum", errNum) :
                new ObjectParameter("ErrNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ConGrpLine_OACT_recurs", acct1Parameter, lineParameter, counterParameter, errNumParameter);
        }
    
        public virtual int TmSp_ConvertGrpLine_OACT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ConvertGrpLine_OACT");
        }
    
        public virtual ObjectResult<TmSp_CorrActReport_Result> TmSp_CorrActReport(string account, string dateFrom, string dateTo)
        {
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_CorrActReport_Result>("TmSp_CorrActReport", accountParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TmSp_CorrActReport_BP_Result> TmSp_CorrActReport_BP(string account, string dateFrom, string dateTo)
        {
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_CorrActReport_BP_Result>("TmSp_CorrActReport_BP", accountParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TmSp_CorrActReport_BP_Split_Result> TmSp_CorrActReport_BP_Split(string account, string dateFrom, string dateTo)
        {
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_CorrActReport_BP_Split_Result>("TmSp_CorrActReport_BP_Split", accountParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TmSp_CorrActReport_Split_Result> TmSp_CorrActReport_Split(string account, string dateFrom, string dateTo)
        {
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_CorrActReport_Split_Result>("TmSp_CorrActReport_Split", accountParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int TmSp_CreateIVIRecalculateIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_CreateIVIRecalculateIndexes");
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5BPFutureRemitByAgeDate_Result> TmSp_DAB002_Top5BPFutureRemitByAgeDate(string agingDate)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("AgingDate", agingDate) :
                new ObjectParameter("AgingDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5BPFutureRemitByAgeDate_Result>("TmSp_DAB002_Top5BPFutureRemitByAgeDate", agingDateParameter);
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5BPOverdue90PDayByAgeDate_Result> TmSp_DAB002_Top5BPOverdue90PDayByAgeDate(string agingDate, string dueDateEnd)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("AgingDate", agingDate) :
                new ObjectParameter("AgingDate", typeof(string));
    
            var dueDateEndParameter = dueDateEnd != null ?
                new ObjectParameter("DueDateEnd", dueDateEnd) :
                new ObjectParameter("DueDateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5BPOverdue90PDayByAgeDate_Result>("TmSp_DAB002_Top5BPOverdue90PDayByAgeDate", agingDateParameter, dueDateEndParameter);
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5BPOverdueXDayByAgeDate_Result> TmSp_DAB002_Top5BPOverdueXDayByAgeDate(string agingDate, string dueDateBegin, string dueDateEnd)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("AgingDate", agingDate) :
                new ObjectParameter("AgingDate", typeof(string));
    
            var dueDateBeginParameter = dueDateBegin != null ?
                new ObjectParameter("DueDateBegin", dueDateBegin) :
                new ObjectParameter("DueDateBegin", typeof(string));
    
            var dueDateEndParameter = dueDateEnd != null ?
                new ObjectParameter("DueDateEnd", dueDateEnd) :
                new ObjectParameter("DueDateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5BPOverdueXDayByAgeDate_Result>("TmSp_DAB002_Top5BPOverdueXDayByAgeDate", agingDateParameter, dueDateBeginParameter, dueDateEndParameter);
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5SLPFutureRemitByAgeDate_Result> TmSp_DAB002_Top5SLPFutureRemitByAgeDate(string agingDate)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("agingDate", agingDate) :
                new ObjectParameter("agingDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5SLPFutureRemitByAgeDate_Result>("TmSp_DAB002_Top5SLPFutureRemitByAgeDate", agingDateParameter);
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5SLPOverdue90PDayByAgeDate_Result> TmSp_DAB002_Top5SLPOverdue90PDayByAgeDate(string agingDate, string dueDateTo)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("agingDate", agingDate) :
                new ObjectParameter("agingDate", typeof(string));
    
            var dueDateToParameter = dueDateTo != null ?
                new ObjectParameter("dueDateTo", dueDateTo) :
                new ObjectParameter("dueDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5SLPOverdue90PDayByAgeDate_Result>("TmSp_DAB002_Top5SLPOverdue90PDayByAgeDate", agingDateParameter, dueDateToParameter);
        }
    
        public virtual int TmSp_DAB002_Top5SLPOverdueTotalByAgeDate(string agingDate, string debCred)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("AgingDate", agingDate) :
                new ObjectParameter("AgingDate", typeof(string));
    
            var debCredParameter = debCred != null ?
                new ObjectParameter("DebCred", debCred) :
                new ObjectParameter("DebCred", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB002_Top5SLPOverdueTotalByAgeDate", agingDateParameter, debCredParameter);
        }
    
        public virtual ObjectResult<TmSp_DAB002_Top5SLPOverdueXDayByAgeDate_Result> TmSp_DAB002_Top5SLPOverdueXDayByAgeDate(string agingDate, string dueDateFrom, string dueDateTo)
        {
            var agingDateParameter = agingDate != null ?
                new ObjectParameter("agingDate", agingDate) :
                new ObjectParameter("agingDate", typeof(string));
    
            var dueDateFromParameter = dueDateFrom != null ?
                new ObjectParameter("dueDateFrom", dueDateFrom) :
                new ObjectParameter("dueDateFrom", typeof(string));
    
            var dueDateToParameter = dueDateTo != null ?
                new ObjectParameter("dueDateTo", dueDateTo) :
                new ObjectParameter("dueDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_DAB002_Top5SLPOverdueXDayByAgeDate_Result>("TmSp_DAB002_Top5SLPOverdueXDayByAgeDate", agingDateParameter, dueDateFromParameter, dueDateToParameter);
        }
    
        public virtual int TmSp_DAB003_CustomerRankingFiscalY(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string excludeCardCode1, string excludeCardCode2, string excludeCardCode3, string excludeCardCode4, string excludeCardCode5)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var excludeCardCode1Parameter = excludeCardCode1 != null ?
                new ObjectParameter("ExcludeCardCode1", excludeCardCode1) :
                new ObjectParameter("ExcludeCardCode1", typeof(string));
    
            var excludeCardCode2Parameter = excludeCardCode2 != null ?
                new ObjectParameter("ExcludeCardCode2", excludeCardCode2) :
                new ObjectParameter("ExcludeCardCode2", typeof(string));
    
            var excludeCardCode3Parameter = excludeCardCode3 != null ?
                new ObjectParameter("ExcludeCardCode3", excludeCardCode3) :
                new ObjectParameter("ExcludeCardCode3", typeof(string));
    
            var excludeCardCode4Parameter = excludeCardCode4 != null ?
                new ObjectParameter("ExcludeCardCode4", excludeCardCode4) :
                new ObjectParameter("ExcludeCardCode4", typeof(string));
    
            var excludeCardCode5Parameter = excludeCardCode5 != null ?
                new ObjectParameter("ExcludeCardCode5", excludeCardCode5) :
                new ObjectParameter("ExcludeCardCode5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_CustomerRankingFiscalY", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, excludeCardCode1Parameter, excludeCardCode2Parameter, excludeCardCode3Parameter, excludeCardCode4Parameter, excludeCardCode5Parameter);
        }
    
        public virtual int TmSp_DAB003_ForcastBefore(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_ForcastBefore", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter);
        }
    
        public virtual int TmSp_DAB003_ItemRankingFiscalY(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string excludeITM1, string excludeITM2, string excludeITM3, string excludeITM4, string excludeITM5)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var excludeITM1Parameter = excludeITM1 != null ?
                new ObjectParameter("ExcludeITM1", excludeITM1) :
                new ObjectParameter("ExcludeITM1", typeof(string));
    
            var excludeITM2Parameter = excludeITM2 != null ?
                new ObjectParameter("ExcludeITM2", excludeITM2) :
                new ObjectParameter("ExcludeITM2", typeof(string));
    
            var excludeITM3Parameter = excludeITM3 != null ?
                new ObjectParameter("ExcludeITM3", excludeITM3) :
                new ObjectParameter("ExcludeITM3", typeof(string));
    
            var excludeITM4Parameter = excludeITM4 != null ?
                new ObjectParameter("ExcludeITM4", excludeITM4) :
                new ObjectParameter("ExcludeITM4", typeof(string));
    
            var excludeITM5Parameter = excludeITM5 != null ?
                new ObjectParameter("ExcludeITM5", excludeITM5) :
                new ObjectParameter("ExcludeITM5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_ItemRankingFiscalY", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, excludeITM1Parameter, excludeITM2Parameter, excludeITM3Parameter, excludeITM4Parameter, excludeITM5Parameter);
        }
    
        public virtual int TmSp_DAB003_RevenueByMonth(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_RevenueByMonth", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter);
        }
    
        public virtual int TmSp_DAB003_TOP5BPByAnnualRevenue(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_TOP5BPByAnnualRevenue", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter);
        }
    
        public virtual int TmSp_DAB003_TopXSLPByRevenue(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB003_TopXSLPByRevenue", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter);
        }
    
        public virtual int TmSp_DAB004_AccountList(Nullable<int> indexer)
        {
            var indexerParameter = indexer.HasValue ?
                new ObjectParameter("Indexer", indexer) :
                new ObjectParameter("Indexer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB004_AccountList", indexerParameter);
        }
    
        public virtual int TmSp_DAB004_CashFlowDetails(Nullable<int> intervalSeq, Nullable<int> incomingPage, Nullable<int> outgoingPage, Nullable<int> perPageVal, Nullable<decimal> threshold, string intervalVal, string voucherFlag, string recurringFlag)
        {
            var intervalSeqParameter = intervalSeq.HasValue ?
                new ObjectParameter("IntervalSeq", intervalSeq) :
                new ObjectParameter("IntervalSeq", typeof(int));
    
            var incomingPageParameter = incomingPage.HasValue ?
                new ObjectParameter("IncomingPage", incomingPage) :
                new ObjectParameter("IncomingPage", typeof(int));
    
            var outgoingPageParameter = outgoingPage.HasValue ?
                new ObjectParameter("OutgoingPage", outgoingPage) :
                new ObjectParameter("OutgoingPage", typeof(int));
    
            var perPageValParameter = perPageVal.HasValue ?
                new ObjectParameter("PerPageVal", perPageVal) :
                new ObjectParameter("PerPageVal", typeof(int));
    
            var thresholdParameter = threshold.HasValue ?
                new ObjectParameter("Threshold", threshold) :
                new ObjectParameter("Threshold", typeof(decimal));
    
            var intervalValParameter = intervalVal != null ?
                new ObjectParameter("IntervalVal", intervalVal) :
                new ObjectParameter("IntervalVal", typeof(string));
    
            var voucherFlagParameter = voucherFlag != null ?
                new ObjectParameter("VoucherFlag", voucherFlag) :
                new ObjectParameter("VoucherFlag", typeof(string));
    
            var recurringFlagParameter = recurringFlag != null ?
                new ObjectParameter("RecurringFlag", recurringFlag) :
                new ObjectParameter("RecurringFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB004_CashFlowDetails", intervalSeqParameter, incomingPageParameter, outgoingPageParameter, perPageValParameter, thresholdParameter, intervalValParameter, voucherFlagParameter, recurringFlagParameter);
        }
    
        public virtual int TmSp_DAB004_CashFlowNamedDetails(Nullable<int> intervalSeq, string direction, Nullable<int> page, string filterStr, Nullable<int> perPageVal, string cardSlpFlag, string intervalVal, string voucherFlag, string recurringFlag)
        {
            var intervalSeqParameter = intervalSeq.HasValue ?
                new ObjectParameter("IntervalSeq", intervalSeq) :
                new ObjectParameter("IntervalSeq", typeof(int));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var filterStrParameter = filterStr != null ?
                new ObjectParameter("FilterStr", filterStr) :
                new ObjectParameter("FilterStr", typeof(string));
    
            var perPageValParameter = perPageVal.HasValue ?
                new ObjectParameter("PerPageVal", perPageVal) :
                new ObjectParameter("PerPageVal", typeof(int));
    
            var cardSlpFlagParameter = cardSlpFlag != null ?
                new ObjectParameter("CardSlpFlag", cardSlpFlag) :
                new ObjectParameter("CardSlpFlag", typeof(string));
    
            var intervalValParameter = intervalVal != null ?
                new ObjectParameter("IntervalVal", intervalVal) :
                new ObjectParameter("IntervalVal", typeof(string));
    
            var voucherFlagParameter = voucherFlag != null ?
                new ObjectParameter("VoucherFlag", voucherFlag) :
                new ObjectParameter("VoucherFlag", typeof(string));
    
            var recurringFlagParameter = recurringFlag != null ?
                new ObjectParameter("RecurringFlag", recurringFlag) :
                new ObjectParameter("RecurringFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB004_CashFlowNamedDetails", intervalSeqParameter, directionParameter, pageParameter, filterStrParameter, perPageValParameter, cardSlpFlagParameter, intervalValParameter, voucherFlagParameter, recurringFlagParameter);
        }
    
        public virtual int TmSp_DAB004_CashFlowOverview(Nullable<int> intervalCnt, string intervalVal)
        {
            var intervalCntParameter = intervalCnt.HasValue ?
                new ObjectParameter("IntervalCnt", intervalCnt) :
                new ObjectParameter("IntervalCnt", typeof(int));
    
            var intervalValParameter = intervalVal != null ?
                new ObjectParameter("IntervalVal", intervalVal) :
                new ObjectParameter("IntervalVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB004_CashFlowOverview", intervalCntParameter, intervalValParameter);
        }
    
        public virtual int TmSp_DAB004_CashFlowRatio(Nullable<int> intervalSeq, Nullable<int> limitedBPsCount, Nullable<int> limitedSLPsCount, string intervalVal, string voucherFlag, string recurringFlag)
        {
            var intervalSeqParameter = intervalSeq.HasValue ?
                new ObjectParameter("IntervalSeq", intervalSeq) :
                new ObjectParameter("IntervalSeq", typeof(int));
    
            var limitedBPsCountParameter = limitedBPsCount.HasValue ?
                new ObjectParameter("LimitedBPsCount", limitedBPsCount) :
                new ObjectParameter("LimitedBPsCount", typeof(int));
    
            var limitedSLPsCountParameter = limitedSLPsCount.HasValue ?
                new ObjectParameter("LimitedSLPsCount", limitedSLPsCount) :
                new ObjectParameter("LimitedSLPsCount", typeof(int));
    
            var intervalValParameter = intervalVal != null ?
                new ObjectParameter("IntervalVal", intervalVal) :
                new ObjectParameter("IntervalVal", typeof(string));
    
            var voucherFlagParameter = voucherFlag != null ?
                new ObjectParameter("VoucherFlag", voucherFlag) :
                new ObjectParameter("VoucherFlag", typeof(string));
    
            var recurringFlagParameter = recurringFlag != null ?
                new ObjectParameter("RecurringFlag", recurringFlag) :
                new ObjectParameter("RecurringFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DAB004_CashFlowRatio", intervalSeqParameter, limitedBPsCountParameter, limitedSLPsCountParameter, intervalValParameter, voucherFlagParameter, recurringFlagParameter);
        }
    
        public virtual int TmSp_DocLineTypeLayout(Nullable<int> docKey_, Nullable<int> objectId_)
        {
            var docKey_Parameter = docKey_.HasValue ?
                new ObjectParameter("DocKey_", docKey_) :
                new ObjectParameter("DocKey_", typeof(int));
    
            var objectId_Parameter = objectId_.HasValue ?
                new ObjectParameter("ObjectId_", objectId_) :
                new ObjectParameter("ObjectId_", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DocLineTypeLayout", docKey_Parameter, objectId_Parameter);
        }
    
        public virtual int TmSp_DragOn(string onObj, string fromObj, string fldAias, string srchVal, Nullable<int> colTypeI)
        {
            var onObjParameter = onObj != null ?
                new ObjectParameter("onObj", onObj) :
                new ObjectParameter("onObj", typeof(string));
    
            var fromObjParameter = fromObj != null ?
                new ObjectParameter("fromObj", fromObj) :
                new ObjectParameter("fromObj", typeof(string));
    
            var fldAiasParameter = fldAias != null ?
                new ObjectParameter("fldAias", fldAias) :
                new ObjectParameter("fldAias", typeof(string));
    
            var srchValParameter = srchVal != null ?
                new ObjectParameter("srchVal", srchVal) :
                new ObjectParameter("srchVal", typeof(string));
    
            var colTypeIParameter = colTypeI.HasValue ?
                new ObjectParameter("ColTypeI", colTypeI) :
                new ObjectParameter("ColTypeI", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DragOn", onObjParameter, fromObjParameter, fldAiasParameter, srchValParameter, colTypeIParameter);
        }
    
        public virtual int TmSp_DragOnPk(string onObj, string fromObj, string fldAias, string srchVal)
        {
            var onObjParameter = onObj != null ?
                new ObjectParameter("onObj", onObj) :
                new ObjectParameter("onObj", typeof(string));
    
            var fromObjParameter = fromObj != null ?
                new ObjectParameter("fromObj", fromObj) :
                new ObjectParameter("fromObj", typeof(string));
    
            var fldAiasParameter = fldAias != null ?
                new ObjectParameter("fldAias", fldAias) :
                new ObjectParameter("fldAias", typeof(string));
    
            var srchValParameter = srchVal != null ?
                new ObjectParameter("srchVal", srchVal) :
                new ObjectParameter("srchVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_DragOnPk", onObjParameter, fromObjParameter, fldAiasParameter, srchValParameter);
        }
    
        public virtual int TmSp_GetDocVatTotals(string array, Nullable<int> absEntry, Nullable<int> totalField, string @object)
        {
            var arrayParameter = array != null ?
                new ObjectParameter("array", array) :
                new ObjectParameter("array", typeof(string));
    
            var absEntryParameter = absEntry.HasValue ?
                new ObjectParameter("absEntry", absEntry) :
                new ObjectParameter("absEntry", typeof(int));
    
            var totalFieldParameter = totalField.HasValue ?
                new ObjectParameter("totalField", totalField) :
                new ObjectParameter("totalField", typeof(int));
    
            var objectParameter = @object != null ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetDocVatTotals", arrayParameter, absEntryParameter, totalFieldParameter, objectParameter);
        }
    
        public virtual int TmSp_GetMaxRange(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive, Nullable<int> times)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            var timesParameter = times.HasValue ?
                new ObjectParameter("times", times) :
                new ObjectParameter("times", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetMaxRange", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter, timesParameter);
        }
    
        public virtual ObjectResult<TmSp_GetOpenRCTs_Result> TmSp_GetOpenRCTs(Nullable<int> @object, string card, string frgnCurr)
        {
            var objectParameter = @object.HasValue ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(int));
    
            var cardParameter = card != null ?
                new ObjectParameter("card", card) :
                new ObjectParameter("card", typeof(string));
    
            var frgnCurrParameter = frgnCurr != null ?
                new ObjectParameter("frgnCurr", frgnCurr) :
                new ObjectParameter("frgnCurr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_GetOpenRCTs_Result>("TmSp_GetOpenRCTs", objectParameter, cardParameter, frgnCurrParameter);
        }
    
        public virtual ObjectResult<TmSp_GetOpenRINs_Result> TmSp_GetOpenRINs(Nullable<int> @object, string card, string frgnCurr)
        {
            var objectParameter = @object.HasValue ?
                new ObjectParameter("object", @object) :
                new ObjectParameter("object", typeof(int));
    
            var cardParameter = card != null ?
                new ObjectParameter("card", card) :
                new ObjectParameter("card", typeof(string));
    
            var frgnCurrParameter = frgnCurr != null ?
                new ObjectParameter("frgnCurr", frgnCurr) :
                new ObjectParameter("frgnCurr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_GetOpenRINs_Result>("TmSp_GetOpenRINs", objectParameter, cardParameter, frgnCurrParameter);
        }
    
        public virtual int TmSp_GetUsers(string dbName, Nullable<int> procID)
        {
            var dbNameParameter = dbName != null ?
                new ObjectParameter("dbName", dbName) :
                new ObjectParameter("dbName", typeof(string));
    
            var procIDParameter = procID.HasValue ?
                new ObjectParameter("ProcID", procID) :
                new ObjectParameter("ProcID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetUsers", dbNameParameter, procIDParameter);
        }
    
        public virtual int TmSp_GetWDD(string producerFrom, string producerTo, string approverFrom, string approverTo, string templateFrom, string templateTo, string dateFrom, string dateTo, string cardFrom, string cardTo, string totalFrom, string totalTo, string statusWait, string statusApproved, string statusRejected, string statusProduced, string statusCanceled, string statusApprProduced, string objectsList, Nullable<int> numObjects, string docTable, Nullable<int> absEntry)
        {
            var producerFromParameter = producerFrom != null ?
                new ObjectParameter("producerFrom", producerFrom) :
                new ObjectParameter("producerFrom", typeof(string));
    
            var producerToParameter = producerTo != null ?
                new ObjectParameter("producerTo", producerTo) :
                new ObjectParameter("producerTo", typeof(string));
    
            var approverFromParameter = approverFrom != null ?
                new ObjectParameter("approverFrom", approverFrom) :
                new ObjectParameter("approverFrom", typeof(string));
    
            var approverToParameter = approverTo != null ?
                new ObjectParameter("approverTo", approverTo) :
                new ObjectParameter("approverTo", typeof(string));
    
            var templateFromParameter = templateFrom != null ?
                new ObjectParameter("templateFrom", templateFrom) :
                new ObjectParameter("templateFrom", typeof(string));
    
            var templateToParameter = templateTo != null ?
                new ObjectParameter("templateTo", templateTo) :
                new ObjectParameter("templateTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var cardFromParameter = cardFrom != null ?
                new ObjectParameter("cardFrom", cardFrom) :
                new ObjectParameter("cardFrom", typeof(string));
    
            var cardToParameter = cardTo != null ?
                new ObjectParameter("cardTo", cardTo) :
                new ObjectParameter("cardTo", typeof(string));
    
            var totalFromParameter = totalFrom != null ?
                new ObjectParameter("totalFrom", totalFrom) :
                new ObjectParameter("totalFrom", typeof(string));
    
            var totalToParameter = totalTo != null ?
                new ObjectParameter("totalTo", totalTo) :
                new ObjectParameter("totalTo", typeof(string));
    
            var statusWaitParameter = statusWait != null ?
                new ObjectParameter("statusWait", statusWait) :
                new ObjectParameter("statusWait", typeof(string));
    
            var statusApprovedParameter = statusApproved != null ?
                new ObjectParameter("statusApproved", statusApproved) :
                new ObjectParameter("statusApproved", typeof(string));
    
            var statusRejectedParameter = statusRejected != null ?
                new ObjectParameter("statusRejected", statusRejected) :
                new ObjectParameter("statusRejected", typeof(string));
    
            var statusProducedParameter = statusProduced != null ?
                new ObjectParameter("statusProduced", statusProduced) :
                new ObjectParameter("statusProduced", typeof(string));
    
            var statusCanceledParameter = statusCanceled != null ?
                new ObjectParameter("statusCanceled", statusCanceled) :
                new ObjectParameter("statusCanceled", typeof(string));
    
            var statusApprProducedParameter = statusApprProduced != null ?
                new ObjectParameter("statusApprProduced", statusApprProduced) :
                new ObjectParameter("statusApprProduced", typeof(string));
    
            var objectsListParameter = objectsList != null ?
                new ObjectParameter("objectsList", objectsList) :
                new ObjectParameter("objectsList", typeof(string));
    
            var numObjectsParameter = numObjects.HasValue ?
                new ObjectParameter("numObjects", numObjects) :
                new ObjectParameter("numObjects", typeof(int));
    
            var docTableParameter = docTable != null ?
                new ObjectParameter("docTable", docTable) :
                new ObjectParameter("docTable", typeof(string));
    
            var absEntryParameter = absEntry.HasValue ?
                new ObjectParameter("absEntry", absEntry) :
                new ObjectParameter("absEntry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetWDD", producerFromParameter, producerToParameter, approverFromParameter, approverToParameter, templateFromParameter, templateToParameter, dateFromParameter, dateToParameter, cardFromParameter, cardToParameter, totalFromParameter, totalToParameter, statusWaitParameter, statusApprovedParameter, statusRejectedParameter, statusProducedParameter, statusCanceledParameter, statusApprProducedParameter, objectsListParameter, numObjectsParameter, docTableParameter, absEntryParameter);
        }
    
        public virtual int TmSp_GLAccountMigration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GLAccountMigration");
        }
    
        public virtual int TmSp_InsertIntoTargetITMandTargetITW(string targetITM, string backUpSimulatedParameters)
        {
            var targetITMParameter = targetITM != null ?
                new ObjectParameter("TargetITM", targetITM) :
                new ObjectParameter("TargetITM", typeof(string));
    
            var backUpSimulatedParametersParameter = backUpSimulatedParameters != null ?
                new ObjectParameter("BackUpSimulatedParameters", backUpSimulatedParameters) :
                new ObjectParameter("BackUpSimulatedParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_InsertIntoTargetITMandTargetITW", targetITMParameter, backUpSimulatedParametersParameter);
        }
    
        public virtual int TmSp_InsertIntoUITMandUITW()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_InsertIntoUITMandUITW");
        }
    
        public virtual int TmSp_Installer_SetFieldValue(string table, string field, string value)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Installer_SetFieldValue", tableParameter, fieldParameter, valueParameter);
        }
    
        public virtual int TmSp_InventoryCountingRiskAssessmentReport(string priceListName, string riskcode, string itemPara1Min, string itemPara1Max, string itemPara2Min, string itemPara2Max, string itemPara3Min, string itemPara3Max, string whsParaMin, string whsParaMax)
        {
            var priceListNameParameter = priceListName != null ?
                new ObjectParameter("priceListName", priceListName) :
                new ObjectParameter("priceListName", typeof(string));
    
            var riskcodeParameter = riskcode != null ?
                new ObjectParameter("riskcode", riskcode) :
                new ObjectParameter("riskcode", typeof(string));
    
            var itemPara1MinParameter = itemPara1Min != null ?
                new ObjectParameter("ItemPara1Min", itemPara1Min) :
                new ObjectParameter("ItemPara1Min", typeof(string));
    
            var itemPara1MaxParameter = itemPara1Max != null ?
                new ObjectParameter("ItemPara1Max", itemPara1Max) :
                new ObjectParameter("ItemPara1Max", typeof(string));
    
            var itemPara2MinParameter = itemPara2Min != null ?
                new ObjectParameter("ItemPara2Min", itemPara2Min) :
                new ObjectParameter("ItemPara2Min", typeof(string));
    
            var itemPara2MaxParameter = itemPara2Max != null ?
                new ObjectParameter("ItemPara2Max", itemPara2Max) :
                new ObjectParameter("ItemPara2Max", typeof(string));
    
            var itemPara3MinParameter = itemPara3Min != null ?
                new ObjectParameter("ItemPara3Min", itemPara3Min) :
                new ObjectParameter("ItemPara3Min", typeof(string));
    
            var itemPara3MaxParameter = itemPara3Max != null ?
                new ObjectParameter("ItemPara3Max", itemPara3Max) :
                new ObjectParameter("ItemPara3Max", typeof(string));
    
            var whsParaMinParameter = whsParaMin != null ?
                new ObjectParameter("WhsParaMin", whsParaMin) :
                new ObjectParameter("WhsParaMin", typeof(string));
    
            var whsParaMaxParameter = whsParaMax != null ?
                new ObjectParameter("WhsParaMax", whsParaMax) :
                new ObjectParameter("WhsParaMax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_InventoryCountingRiskAssessmentReport", priceListNameParameter, riskcodeParameter, itemPara1MinParameter, itemPara1MaxParameter, itemPara2MinParameter, itemPara2MaxParameter, itemPara3MinParameter, itemPara3MaxParameter, whsParaMinParameter, whsParaMaxParameter);
        }
    
        public virtual int TmSp_IVICheckDiskSpace()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVICheckDiskSpace");
        }
    
        public virtual int TmSp_IVIInventoryValueDiffsFIFOItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVIInventoryValueDiffsFIFOItems");
        }
    
        public virtual int TmSp_IVIInventoryValueDiffsMAPnSTDItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVIInventoryValueDiffsMAPnSTDItems");
        }
    
        public virtual int TmSp_IVIVerifyInventoryRecalculation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVIVerifyInventoryRecalculation");
        }
    
        public virtual int TmSp_IVIYearTransfer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVIYearTransfer");
        }
    
        public virtual int TmSp_IVSR_AutomaticHealingRequiredQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVSR_AutomaticHealingRequiredQuery");
        }
    
        public virtual int TmSp_IVSR_Check_DB_Candidate_For_IVI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVSR_Check_DB_Candidate_For_IVI");
        }
    
        public virtual int TmSp_IVSR_SupportInteractionRequiredQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVSR_SupportInteractionRequiredQuery");
        }
    
        public virtual int TmSp_IVSR_UserInteractionRequiredQuery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_IVSR_UserInteractionRequiredQuery");
        }
    
        public virtual int TmSp_OpportAnalysis(string condText, Nullable<int> objType, Nullable<int> cutByObject, string getAllOpr)
        {
            var condTextParameter = condText != null ?
                new ObjectParameter("CondText", condText) :
                new ObjectParameter("CondText", typeof(string));
    
            var objTypeParameter = objType.HasValue ?
                new ObjectParameter("ObjType", objType) :
                new ObjectParameter("ObjType", typeof(int));
    
            var cutByObjectParameter = cutByObject.HasValue ?
                new ObjectParameter("CutByObject", cutByObject) :
                new ObjectParameter("CutByObject", typeof(int));
    
            var getAllOprParameter = getAllOpr != null ?
                new ObjectParameter("GetAllOpr", getAllOpr) :
                new ObjectParameter("GetAllOpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_OpportAnalysis", condTextParameter, objTypeParameter, cutByObjectParameter, getAllOprParameter);
        }
    
        public virtual int TmSp_OpportAnalysis_CRD(string condText, Nullable<int> getCrdGroup, string getAllOpr)
        {
            var condTextParameter = condText != null ?
                new ObjectParameter("CondText", condText) :
                new ObjectParameter("CondText", typeof(string));
    
            var getCrdGroupParameter = getCrdGroup.HasValue ?
                new ObjectParameter("GetCrdGroup", getCrdGroup) :
                new ObjectParameter("GetCrdGroup", typeof(int));
    
            var getAllOprParameter = getAllOpr != null ?
                new ObjectParameter("GetAllOpr", getAllOpr) :
                new ObjectParameter("GetAllOpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_OpportAnalysis_CRD", condTextParameter, getCrdGroupParameter, getAllOprParameter);
        }
    
        public virtual int TmSp_OpportAnalysis_ITM(string condText, Nullable<int> cutByObject, Nullable<int> getItmGroup, string getAllOpr)
        {
            var condTextParameter = condText != null ?
                new ObjectParameter("CondText", condText) :
                new ObjectParameter("CondText", typeof(string));
    
            var cutByObjectParameter = cutByObject.HasValue ?
                new ObjectParameter("cutByObject", cutByObject) :
                new ObjectParameter("cutByObject", typeof(int));
    
            var getItmGroupParameter = getItmGroup.HasValue ?
                new ObjectParameter("GetItmGroup", getItmGroup) :
                new ObjectParameter("GetItmGroup", typeof(int));
    
            var getAllOprParameter = getAllOpr != null ?
                new ObjectParameter("GetAllOpr", getAllOpr) :
                new ObjectParameter("GetAllOpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_OpportAnalysis_ITM", condTextParameter, cutByObjectParameter, getItmGroupParameter, getAllOprParameter);
        }
    
        public virtual int TmSp_OpportAnalysis_SLP(string condText, string getAllOpr)
        {
            var condTextParameter = condText != null ?
                new ObjectParameter("CondText", condText) :
                new ObjectParameter("CondText", typeof(string));
    
            var getAllOprParameter = getAllOpr != null ?
                new ObjectParameter("GetAllOpr", getAllOpr) :
                new ObjectParameter("GetAllOpr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_OpportAnalysis_SLP", condTextParameter, getAllOprParameter);
        }
    
        public virtual int TmSp_OutboxSync()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_OutboxSync");
        }
    
        public virtual int TmSp_PaymentsAndDuePayments(Nullable<short> currentYear, string fromBPCode, string toBPCode)
        {
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("CurrentYear", currentYear) :
                new ObjectParameter("CurrentYear", typeof(short));
    
            var fromBPCodeParameter = fromBPCode != null ?
                new ObjectParameter("FromBPCode", fromBPCode) :
                new ObjectParameter("FromBPCode", typeof(string));
    
            var toBPCodeParameter = toBPCode != null ?
                new ObjectParameter("ToBPCode", toBPCode) :
                new ObjectParameter("ToBPCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_PaymentsAndDuePayments", currentYearParameter, fromBPCodeParameter, toBPCodeParameter);
        }
    
        public virtual int TmSp_PicknPackCreateTempTable(string docTable)
        {
            var docTableParameter = docTable != null ?
                new ObjectParameter("docTable", docTable) :
                new ObjectParameter("docTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_PicknPackCreateTempTable", docTableParameter);
        }
    
        public virtual int TmSp_PicknPackCreateTmp4Qtty()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_PicknPackCreateTmp4Qtty");
        }
    
        public virtual int TmSp_Purch_An_Crd_Det_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Crd_Det_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Crd_Grp_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Crd_Grp_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Crd_Grp_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Crd_Grp_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Crd_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Crd_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Crd_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Crd_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Itm_Det_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Itm_Det_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Itm_Grp_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Itm_Grp_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Itm_Grp_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Itm_Grp_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Itm_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Itm_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Itm_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Itm_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Slp_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Slp_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Purch_An_Slp_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Purch_An_Slp_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_RebuildAcctMatch(string actCode, string actCurr, string useLocal, string isCard, string external)
        {
            var actCodeParameter = actCode != null ?
                new ObjectParameter("actCode", actCode) :
                new ObjectParameter("actCode", typeof(string));
    
            var actCurrParameter = actCurr != null ?
                new ObjectParameter("actCurr", actCurr) :
                new ObjectParameter("actCurr", typeof(string));
    
            var useLocalParameter = useLocal != null ?
                new ObjectParameter("useLocal", useLocal) :
                new ObjectParameter("useLocal", typeof(string));
    
            var isCardParameter = isCard != null ?
                new ObjectParameter("isCard", isCard) :
                new ObjectParameter("isCard", typeof(string));
    
            var externalParameter = external != null ?
                new ObjectParameter("external", external) :
                new ObjectParameter("external", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_RebuildAcctMatch", actCodeParameter, actCurrParameter, useLocalParameter, isCardParameter, externalParameter);
        }
    
        public virtual int TmSp_RebuildMatchHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_RebuildMatchHistory");
        }
    
        public virtual int TmSp_RemoveIVIRecalculateIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_RemoveIVIRecalculateIndexes");
        }
    
        public virtual int TmSp_Replace_Table(string sourceDB, string sourceTable, string utilityDB, string utilityTable)
        {
            var sourceDBParameter = sourceDB != null ?
                new ObjectParameter("SourceDB", sourceDB) :
                new ObjectParameter("SourceDB", typeof(string));
    
            var sourceTableParameter = sourceTable != null ?
                new ObjectParameter("SourceTable", sourceTable) :
                new ObjectParameter("SourceTable", typeof(string));
    
            var utilityDBParameter = utilityDB != null ?
                new ObjectParameter("UtilityDB", utilityDB) :
                new ObjectParameter("UtilityDB", typeof(string));
    
            var utilityTableParameter = utilityTable != null ?
                new ObjectParameter("UtilityTable", utilityTable) :
                new ObjectParameter("UtilityTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Replace_Table", sourceDBParameter, sourceTableParameter, utilityDBParameter, utilityTableParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Det_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Det_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Det_Y_LC(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Det_Y_LC", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Grp_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Grp_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Grp_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Grp_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Sng_M_LC(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Sng_M_LC", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Crd_Sng_Y_LC(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Crd_Sng_Y_LC", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Det_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Det_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Grp_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Grp_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Grp_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Grp_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Itm_Sng_Y_LC(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Itm_Sng_Y_LC", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Slp_Sng_M(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Slp_Sng_M", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Slp_Sng_M_LC(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Slp_Sng_M_LC", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_Sales_An_Slp_Sng_Y(string objectType, string showType, string docDateFrom, string docDateTo, string docDueDateFrom, string docDueDateTo, string cardCodeFrom, string cardCodeTo, string crdGroupCode, string itemCodeFrom, string itemCodeTo, string itmGroupCode, string itmProps, string crdProps, string slpCodeFrom, string slpCodeTo, string taxDateFrom, string taxDateTo, string brand, string prjCode, Nullable<int> rptType, string cutbyObject, string dspFrznBP, string dspFrznITM, string bPLIdSet, string slpIncludeInactive)
        {
            var objectTypeParameter = objectType != null ?
                new ObjectParameter("ObjectType", objectType) :
                new ObjectParameter("ObjectType", typeof(string));
    
            var showTypeParameter = showType != null ?
                new ObjectParameter("ShowType", showType) :
                new ObjectParameter("ShowType", typeof(string));
    
            var docDateFromParameter = docDateFrom != null ?
                new ObjectParameter("DocDateFrom", docDateFrom) :
                new ObjectParameter("DocDateFrom", typeof(string));
    
            var docDateToParameter = docDateTo != null ?
                new ObjectParameter("DocDateTo", docDateTo) :
                new ObjectParameter("DocDateTo", typeof(string));
    
            var docDueDateFromParameter = docDueDateFrom != null ?
                new ObjectParameter("DocDueDateFrom", docDueDateFrom) :
                new ObjectParameter("DocDueDateFrom", typeof(string));
    
            var docDueDateToParameter = docDueDateTo != null ?
                new ObjectParameter("DocDueDateTo", docDueDateTo) :
                new ObjectParameter("DocDueDateTo", typeof(string));
    
            var cardCodeFromParameter = cardCodeFrom != null ?
                new ObjectParameter("CardCodeFrom", cardCodeFrom) :
                new ObjectParameter("CardCodeFrom", typeof(string));
    
            var cardCodeToParameter = cardCodeTo != null ?
                new ObjectParameter("CardCodeTo", cardCodeTo) :
                new ObjectParameter("CardCodeTo", typeof(string));
    
            var crdGroupCodeParameter = crdGroupCode != null ?
                new ObjectParameter("CrdGroupCode", crdGroupCode) :
                new ObjectParameter("CrdGroupCode", typeof(string));
    
            var itemCodeFromParameter = itemCodeFrom != null ?
                new ObjectParameter("ItemCodeFrom", itemCodeFrom) :
                new ObjectParameter("ItemCodeFrom", typeof(string));
    
            var itemCodeToParameter = itemCodeTo != null ?
                new ObjectParameter("ItemCodeTo", itemCodeTo) :
                new ObjectParameter("ItemCodeTo", typeof(string));
    
            var itmGroupCodeParameter = itmGroupCode != null ?
                new ObjectParameter("ItmGroupCode", itmGroupCode) :
                new ObjectParameter("ItmGroupCode", typeof(string));
    
            var itmPropsParameter = itmProps != null ?
                new ObjectParameter("ItmProps", itmProps) :
                new ObjectParameter("ItmProps", typeof(string));
    
            var crdPropsParameter = crdProps != null ?
                new ObjectParameter("CrdProps", crdProps) :
                new ObjectParameter("CrdProps", typeof(string));
    
            var slpCodeFromParameter = slpCodeFrom != null ?
                new ObjectParameter("SlpCodeFrom", slpCodeFrom) :
                new ObjectParameter("SlpCodeFrom", typeof(string));
    
            var slpCodeToParameter = slpCodeTo != null ?
                new ObjectParameter("SlpCodeTo", slpCodeTo) :
                new ObjectParameter("SlpCodeTo", typeof(string));
    
            var taxDateFromParameter = taxDateFrom != null ?
                new ObjectParameter("TaxDateFrom", taxDateFrom) :
                new ObjectParameter("TaxDateFrom", typeof(string));
    
            var taxDateToParameter = taxDateTo != null ?
                new ObjectParameter("TaxDateTo", taxDateTo) :
                new ObjectParameter("TaxDateTo", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var prjCodeParameter = prjCode != null ?
                new ObjectParameter("PrjCode", prjCode) :
                new ObjectParameter("PrjCode", typeof(string));
    
            var rptTypeParameter = rptType.HasValue ?
                new ObjectParameter("RptType", rptType) :
                new ObjectParameter("RptType", typeof(int));
    
            var cutbyObjectParameter = cutbyObject != null ?
                new ObjectParameter("cutbyObject", cutbyObject) :
                new ObjectParameter("cutbyObject", typeof(string));
    
            var dspFrznBPParameter = dspFrznBP != null ?
                new ObjectParameter("DspFrznBP", dspFrznBP) :
                new ObjectParameter("DspFrznBP", typeof(string));
    
            var dspFrznITMParameter = dspFrznITM != null ?
                new ObjectParameter("DspFrznITM", dspFrznITM) :
                new ObjectParameter("DspFrznITM", typeof(string));
    
            var bPLIdSetParameter = bPLIdSet != null ?
                new ObjectParameter("BPLIdSet", bPLIdSet) :
                new ObjectParameter("BPLIdSet", typeof(string));
    
            var slpIncludeInactiveParameter = slpIncludeInactive != null ?
                new ObjectParameter("SlpIncludeInactive", slpIncludeInactive) :
                new ObjectParameter("SlpIncludeInactive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Sales_An_Slp_Sng_Y", objectTypeParameter, showTypeParameter, docDateFromParameter, docDateToParameter, docDueDateFromParameter, docDueDateToParameter, cardCodeFromParameter, cardCodeToParameter, crdGroupCodeParameter, itemCodeFromParameter, itemCodeToParameter, itmGroupCodeParameter, itmPropsParameter, crdPropsParameter, slpCodeFromParameter, slpCodeToParameter, taxDateFromParameter, taxDateToParameter, brandParameter, prjCodeParameter, rptTypeParameter, cutbyObjectParameter, dspFrznBPParameter, dspFrznITMParameter, bPLIdSetParameter, slpIncludeInactiveParameter);
        }
    
        public virtual int TmSp_SetBalanceByJdt(Nullable<int> jdtAbs)
        {
            var jdtAbsParameter = jdtAbs.HasValue ?
                new ObjectParameter("jdtAbs", jdtAbs) :
                new ObjectParameter("jdtAbs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_SetBalanceByJdt", jdtAbsParameter);
        }
    
        public virtual ObjectResult<TmSp_SetBgtAccumulators_ByJdt_Result> TmSp_SetBgtAccumulators_ByJdt(Nullable<int> jdtAbs, string alert, string curPeriod)
        {
            var jdtAbsParameter = jdtAbs.HasValue ?
                new ObjectParameter("jdtAbs", jdtAbs) :
                new ObjectParameter("jdtAbs", typeof(int));
    
            var alertParameter = alert != null ?
                new ObjectParameter("Alert", alert) :
                new ObjectParameter("Alert", typeof(string));
    
            var curPeriodParameter = curPeriod != null ?
                new ObjectParameter("CurPeriod", curPeriod) :
                new ObjectParameter("CurPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_SetBgtAccumulators_ByJdt_Result>("TmSp_SetBgtAccumulators_ByJdt", jdtAbsParameter, alertParameter, curPeriodParameter);
        }
    
        public virtual int TmSp_SetGlStamp(Nullable<int> fldType)
        {
            var fldTypeParameter = fldType.HasValue ?
                new ObjectParameter("FldType", fldType) :
                new ObjectParameter("FldType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_SetGlStamp", fldTypeParameter);
        }
    
        public virtual int TmSp_SetVendorDeductPercent(Nullable<int> jdtAbs, string periodCat)
        {
            var jdtAbsParameter = jdtAbs.HasValue ?
                new ObjectParameter("jdtAbs", jdtAbs) :
                new ObjectParameter("jdtAbs", typeof(int));
    
            var periodCatParameter = periodCat != null ?
                new ObjectParameter("PeriodCat", periodCat) :
                new ObjectParameter("PeriodCat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_SetVendorDeductPercent", jdtAbsParameter, periodCatParameter);
        }
    
        public virtual int TmSp_SortIBT1AndSRI1ForUpg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_SortIBT1AndSRI1ForUpg");
        }
    
        public virtual int TmSp_SpecialPriceCopy(string targetCrd, string sourceCrd, Nullable<int> userID, Nullable<int> type, string tempTableSuffix)
        {
            var targetCrdParameter = targetCrd != null ?
                new ObjectParameter("targetCrd", targetCrd) :
                new ObjectParameter("targetCrd", typeof(string));
    
            var sourceCrdParameter = sourceCrd != null ?
                new ObjectParameter("sourceCrd", sourceCrd) :
                new ObjectParameter("sourceCrd", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var tempTableSuffixParameter = tempTableSuffix != null ?
                new ObjectParameter("tempTableSuffix", tempTableSuffix) :
                new ObjectParameter("tempTableSuffix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_SpecialPriceCopy", targetCrdParameter, sourceCrdParameter, userIDParameter, typeParameter, tempTableSuffixParameter);
        }
    
        public virtual int TmSp_TransferRecordsToUILM(Nullable<int> msgFromCopy, Nullable<int> msgToCopy)
        {
            var msgFromCopyParameter = msgFromCopy.HasValue ?
                new ObjectParameter("MsgFromCopy", msgFromCopy) :
                new ObjectParameter("MsgFromCopy", typeof(int));
    
            var msgToCopyParameter = msgToCopy.HasValue ?
                new ObjectParameter("MsgToCopy", msgToCopy) :
                new ObjectParameter("MsgToCopy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_TransferRecordsToUILM", msgFromCopyParameter, msgToCopyParameter);
        }
    
        public virtual int TmSp_UpdatingOITM_OITW(string sourceDB, string utilityDB, string isCompanyPerWh)
        {
            var sourceDBParameter = sourceDB != null ?
                new ObjectParameter("SourceDB", sourceDB) :
                new ObjectParameter("SourceDB", typeof(string));
    
            var utilityDBParameter = utilityDB != null ?
                new ObjectParameter("UtilityDB", utilityDB) :
                new ObjectParameter("UtilityDB", typeof(string));
    
            var isCompanyPerWhParameter = isCompanyPerWh != null ?
                new ObjectParameter("isCompanyPerWh", isCompanyPerWh) :
                new ObjectParameter("isCompanyPerWh", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_UpdatingOITM_OITW", sourceDBParameter, utilityDBParameter, isCompanyPerWhParameter);
        }
    
        public virtual int TmSp_ValidateReadOnlyUser(string loginName, string dbName, string dbName2)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var dbNameParameter = dbName != null ?
                new ObjectParameter("DbName", dbName) :
                new ObjectParameter("DbName", typeof(string));
    
            var dbName2Parameter = dbName2 != null ?
                new ObjectParameter("DbName2", dbName2) :
                new ObjectParameter("DbName2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_ValidateReadOnlyUser", loginNameParameter, dbNameParameter, dbName2Parameter);
        }
    }
}
