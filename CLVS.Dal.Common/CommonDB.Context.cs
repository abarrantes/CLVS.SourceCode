//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CLVS.Dal.Common
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CommonDBEntities : DbContext
    {
        public CommonDBEntities()
            : base("name=CommonDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EBCFG> EBCFGs { get; set; }
        public virtual DbSet<EBUSR> EBUSRs { get; set; }
        public virtual DbSet<ECLGF> ECLGFs { get; set; }
        public virtual DbSet<ECLGT> ECLGTs { get; set; }
        public virtual DbSet<ECLOG> ECLOGs { get; set; }
        public virtual DbSet<EESUB> EESUBs { get; set; }
        public virtual DbSet<ELCFG> ELCFGs { get; set; }
        public virtual DbSet<EMERR> EMERRs { get; set; }
        public virtual DbSet<EMID> EMIDS { get; set; }
        public virtual DbSet<EMMSG> EMMSGs { get; set; }
        public virtual DbSet<EMSTT> EMSTTs { get; set; }
        public virtual DbSet<EPASM> EPASMs { get; set; }
        public virtual DbSet<EPOPR> EPOPRs { get; set; }
        public virtual DbSet<EPPKG> EPPKGs { get; set; }
        public virtual DbSet<EPPRC> EPPRCs { get; set; }
        public virtual DbSet<EPSRV> EPSRVs { get; set; }
        public virtual DbSet<ORTT> ORTTs { get; set; }
        public virtual DbSet<SARI> SARIs { get; set; }
        public virtual DbSet<SCAB> SCABs { get; set; }
        public virtual DbSet<SCFG> SCFGs { get; set; }
        public virtual DbSet<SCLC> SCLCs { get; set; }
        public virtual DbSet<SCSP> SCSPs { get; set; }
        public virtual DbSet<SCUC> SCUCs { get; set; }
        public virtual DbSet<SDRC> SDRCs { get; set; }
        public virtual DbSet<SDRF> SDRFs { get; set; }
        public virtual DbSet<SDRO> SDROes { get; set; }
        public virtual DbSet<SDRQ> SDRQs { get; set; }
        public virtual DbSet<SDRR> SDRRs { get; set; }
        public virtual DbSet<SEULA> SEULAs { get; set; }
        public virtual DbSet<SEVT> SEVTs { get; set; }
        public virtual DbSet<SEWAD> SEWADs { get; set; }
        public virtual DbSet<SEWBU> SEWBUs { get; set; }
        public virtual DbSet<SEWC> SEWCS { get; set; }
        public virtual DbSet<SEWDB> SEWDBs { get; set; }
        public virtual DbSet<SEWDQ> SEWDQs { get; set; }
        public virtual DbSet<SEWDV> SEWDVs { get; set; }
        public virtual DbSet<SEWHW> SEWHWs { get; set; }
        public virtual DbSet<SEWIC> SEWICs { get; set; }
        public virtual DbSet<SEWLA> SEWLAs { get; set; }
        public virtual DbSet<SEWSN> SEWSNs { get; set; }
        public virtual DbSet<SEWST> SEWSTs { get; set; }
        public virtual DbSet<SEWSY> SEWSies { get; set; }
        public virtual DbSet<SEWU> SEWUs { get; set; }
        public virtual DbSet<SEWU1> SEWU1 { get; set; }
        public virtual DbSet<SEWU2> SEWU2 { get; set; }
        public virtual DbSet<SEWUA> SEWUAs { get; set; }
        public virtual DbSet<SEWU3> SEWUS1 { get; set; }
        public virtual DbSet<SEWUT> SEWUTs { get; set; }
        public virtual DbSet<SFDK> SFDKs { get; set; }
        public virtual DbSet<SFMD> SFMDs { get; set; }
        public virtual DbSet<SHLP> SHLPs { get; set; }
        public virtual DbSet<SHQR> SHQRs { get; set; }
        public virtual DbSet<SINF> SINFs { get; set; }
        public virtual DbSet<SLIC> SLICs { get; set; }
        public virtual DbSet<SLOG> SLOGs { get; set; }
        public virtual DbSet<SLOGR> SLOGRs { get; set; }
        public virtual DbSet<SLSC> SLSCs { get; set; }
        public virtual DbSet<SLSD> SLSDs { get; set; }
        public virtual DbSet<SLSP> SLSPs { get; set; }
        public virtual DbSet<SLSPP> SLSPPs { get; set; }
        public virtual DbSet<SMSG> SMSGs { get; set; }
        public virtual DbSet<SPAR> SPARs { get; set; }
        public virtual DbSet<SRGC> SRGCs { get; set; }
        public virtual DbSet<SWDP> SWDPs { get; set; }
        public virtual DbSet<SWEI> SWEIs { get; set; }
        public virtual DbSet<SWFQ> SWFQs { get; set; }
        public virtual DbSet<SWID> SWIDs { get; set; }
        public virtual DbSet<SWPD> SWPDs { get; set; }
        public virtual DbSet<SWR> SWRS { get; set; }
        public virtual DbSet<SXRCD> SXRCDs { get; set; }
        public virtual DbSet<SXRCO> SXRCOes { get; set; }
        public virtual DbSet<SXRDB> SXRDBs { get; set; }
        public virtual DbSet<SXRDF> SXRDFs { get; set; }
        public virtual DbSet<SXREL> SXRELs { get; set; }
        public virtual DbSet<SXRET> SXRETs { get; set; }
        public virtual DbSet<SXREV> SXREVs { get; set; }
        public virtual DbSet<SXRFU> SXRFUs { get; set; }
        public virtual DbSet<SXRIN> SXRINs { get; set; }
        public virtual DbSet<SXRME> SXRMEs { get; set; }
        public virtual DbSet<SXRNO> SXRNOes { get; set; }
        public virtual DbSet<SXROA> SXROAs { get; set; }
        public virtual DbSet<SXROB> SXROBs { get; set; }
        public virtual DbSet<SXRPD> SXRPDs { get; set; }
        public virtual DbSet<SXRPR> SXRPRs { get; set; }
        public virtual DbSet<SXRRE> SXRREs { get; set; }
        public virtual DbSet<SXRRO> SXRROes { get; set; }
        public virtual DbSet<SXRSS> SXRSSes { get; set; }
        public virtual DbSet<SXRTE> SXRTEs { get; set; }
        public virtual DbSet<TSCD> TSCDs { get; set; }
    
        public virtual int ClearEnumValues(Nullable<int> enumid)
        {
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearEnumValues", enumidParameter);
        }
    
        public virtual int DeleteAllEnumsAndClasses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllEnumsAndClasses");
        }
    
        public virtual int DeleteAllObjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllObjects");
        }
    
        public virtual int DeleteAllPropertyDefs(Nullable<int> classid)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllPropertyDefs", classidParameter);
        }
    
        public virtual int DeleteClassDef(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClassDef", idParameter);
        }
    
        public virtual int DeleteDependentProperties(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDependentProperties", idParameter);
        }
    
        public virtual int DeleteEnumType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEnumType", idParameter);
        }
    
        public virtual int DeleteMetaObject(Nullable<int> objid)
        {
            var objidParameter = objid.HasValue ?
                new ObjectParameter("objid", objid) :
                new ObjectParameter("objid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMetaObject", objidParameter);
        }
    
        public virtual int DeleteMetaProperty(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMetaProperty", idParameter);
        }
    
        public virtual int DeleteMetaRelation(Nullable<int> objidfrom, Nullable<int> propdefid, Nullable<int> seqno)
        {
            var objidfromParameter = objidfrom.HasValue ?
                new ObjectParameter("objidfrom", objidfrom) :
                new ObjectParameter("objidfrom", typeof(int));
    
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var seqnoParameter = seqno.HasValue ?
                new ObjectParameter("seqno", seqno) :
                new ObjectParameter("seqno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMetaRelation", objidfromParameter, propdefidParameter, seqnoParameter);
        }
    
        public virtual int DeletePropertyDef(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePropertyDef", idParameter);
        }
    
        public virtual int InsertClassDef(ObjectParameter classid, string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClassDef", classid, nameParameter, descriptionParameter);
        }
    
        public virtual int InsertClassDefId(Nullable<int> classid, string name, string description)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClassDefId", classidParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int InsertEnumType(ObjectParameter enumid, string name, Nullable<int> type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEnumType", enumid, nameParameter, typeParameter);
        }
    
        public virtual int InsertEnumTypeId(Nullable<int> enumid, string name, Nullable<int> type)
        {
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEnumTypeId", enumidParameter, nameParameter, typeParameter);
        }
    
        public virtual int InsertEnumValue(Nullable<int> enumid, string name, Nullable<int> ivalue, string cvalue)
        {
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ivalueParameter = ivalue.HasValue ?
                new ObjectParameter("ivalue", ivalue) :
                new ObjectParameter("ivalue", typeof(int));
    
            var cvalueParameter = cvalue != null ?
                new ObjectParameter("cvalue", cvalue) :
                new ObjectParameter("cvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEnumValue", enumidParameter, nameParameter, ivalueParameter, cvalueParameter);
        }
    
        public virtual int InsertMetaObject(ObjectParameter objid, Nullable<int> classid, string name, string description, ObjectParameter created, string access, string searchstring)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var accessParameter = access != null ?
                new ObjectParameter("access", access) :
                new ObjectParameter("access", typeof(string));
    
            var searchstringParameter = searchstring != null ?
                new ObjectParameter("searchstring", searchstring) :
                new ObjectParameter("searchstring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMetaObject", objid, classidParameter, nameParameter, descriptionParameter, created, accessParameter, searchstringParameter);
        }
    
        public virtual int InsertMetaProperty(ObjectParameter propid, Nullable<int> objid, Nullable<int> propdefid, Nullable<int> ivalue, Nullable<double> fvalue, string cvalue)
        {
            var objidParameter = objid.HasValue ?
                new ObjectParameter("objid", objid) :
                new ObjectParameter("objid", typeof(int));
    
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var ivalueParameter = ivalue.HasValue ?
                new ObjectParameter("ivalue", ivalue) :
                new ObjectParameter("ivalue", typeof(int));
    
            var fvalueParameter = fvalue.HasValue ?
                new ObjectParameter("fvalue", fvalue) :
                new ObjectParameter("fvalue", typeof(double));
    
            var cvalueParameter = cvalue != null ?
                new ObjectParameter("cvalue", cvalue) :
                new ObjectParameter("cvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMetaProperty", propid, objidParameter, propdefidParameter, ivalueParameter, fvalueParameter, cvalueParameter);
        }
    
        public virtual int InsertMetaRelation(Nullable<int> objidfrom, Nullable<int> propdefid, Nullable<int> seqnoin, ObjectParameter seqnoout, Nullable<int> objidto)
        {
            var objidfromParameter = objidfrom.HasValue ?
                new ObjectParameter("objidfrom", objidfrom) :
                new ObjectParameter("objidfrom", typeof(int));
    
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var seqnoinParameter = seqnoin.HasValue ?
                new ObjectParameter("seqnoin", seqnoin) :
                new ObjectParameter("seqnoin", typeof(int));
    
            var objidtoParameter = objidto.HasValue ?
                new ObjectParameter("objidto", objidto) :
                new ObjectParameter("objidto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMetaRelation", objidfromParameter, propdefidParameter, seqnoinParameter, seqnoout, objidtoParameter);
        }
    
        public virtual int InsertPropertyDef(ObjectParameter propdefid, Nullable<int> classid, Nullable<int> seqnoin, ObjectParameter seqnoout, string name, string description, Nullable<int> type, Nullable<int> classrefid, Nullable<int> enumid)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var seqnoinParameter = seqnoin.HasValue ?
                new ObjectParameter("seqnoin", seqnoin) :
                new ObjectParameter("seqnoin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var classrefidParameter = classrefid.HasValue ?
                new ObjectParameter("classrefid", classrefid) :
                new ObjectParameter("classrefid", typeof(int));
    
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPropertyDef", propdefid, classidParameter, seqnoinParameter, seqnoout, nameParameter, descriptionParameter, typeParameter, classrefidParameter, enumidParameter);
        }
    
        public virtual int InsertPropertyDefId(Nullable<int> propdefid, Nullable<int> classid, Nullable<int> seqnoin, ObjectParameter seqnoout, string name, string description, Nullable<int> type, Nullable<int> classrefid, Nullable<int> enumid)
        {
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var seqnoinParameter = seqnoin.HasValue ?
                new ObjectParameter("seqnoin", seqnoin) :
                new ObjectParameter("seqnoin", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var classrefidParameter = classrefid.HasValue ?
                new ObjectParameter("classrefid", classrefid) :
                new ObjectParameter("classrefid", typeof(int));
    
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPropertyDefId", propdefidParameter, classidParameter, seqnoinParameter, seqnoout, nameParameter, descriptionParameter, typeParameter, classrefidParameter, enumidParameter);
        }
    
        public virtual int NumberPropertyDefs(Nullable<int> cls, Nullable<int> seq)
        {
            var clsParameter = cls.HasValue ?
                new ObjectParameter("cls", cls) :
                new ObjectParameter("cls", typeof(int));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("seq", seq) :
                new ObjectParameter("seq", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NumberPropertyDefs", clsParameter, seqParameter);
        }
    
        public virtual int NumberRelations(Nullable<int> objidfrom, Nullable<int> propdefid, Nullable<int> seq)
        {
            var objidfromParameter = objidfrom.HasValue ?
                new ObjectParameter("objidfrom", objidfrom) :
                new ObjectParameter("objidfrom", typeof(int));
    
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var seqParameter = seq.HasValue ?
                new ObjectParameter("seq", seq) :
                new ObjectParameter("seq", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NumberRelations", objidfromParameter, propdefidParameter, seqParameter);
        }
    
        public virtual int OBSSp_GetNextExecFromSchedule(string service)
        {
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OBSSp_GetNextExecFromSchedule", serviceParameter);
        }
    
        public virtual ObjectResult<OBSSp_GetServiceRecord_Result> OBSSp_GetServiceRecord(string service)
        {
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OBSSp_GetServiceRecord_Result>("OBSSp_GetServiceRecord", serviceParameter);
        }
    
        public virtual int OBSSp_UpdateScheduleRecord(string service, string type, Nullable<System.DateTime> schdDate, string schdDay, Nullable<int> interval, string autoStart)
        {
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var schdDateParameter = schdDate.HasValue ?
                new ObjectParameter("schdDate", schdDate) :
                new ObjectParameter("schdDate", typeof(System.DateTime));
    
            var schdDayParameter = schdDay != null ?
                new ObjectParameter("schdDay", schdDay) :
                new ObjectParameter("schdDay", typeof(string));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var autoStartParameter = autoStart != null ?
                new ObjectParameter("AutoStart", autoStart) :
                new ObjectParameter("AutoStart", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OBSSp_UpdateScheduleRecord", serviceParameter, typeParameter, schdDateParameter, schdDayParameter, intervalParameter, autoStartParameter);
        }
    
        public virtual int OBSSp_UpdateServiceExec(string service)
        {
            var serviceParameter = service != null ?
                new ObjectParameter("service", service) :
                new ObjectParameter("service", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OBSSp_UpdateServiceExec", serviceParameter);
        }
    
        public virtual int RGSp_UpdateInstance(string computerName, string instnceIn)
        {
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var instnceInParameter = instnceIn != null ?
                new ObjectParameter("InstnceIn", instnceIn) :
                new ObjectParameter("InstnceIn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RGSp_UpdateInstance", computerNameParameter, instnceInParameter);
        }
    
        public virtual int RGSp_UpdateLicense(string computerName, string instnceIn)
        {
            var computerNameParameter = computerName != null ?
                new ObjectParameter("ComputerName", computerName) :
                new ObjectParameter("ComputerName", typeof(string));
    
            var instnceInParameter = instnceIn != null ?
                new ObjectParameter("InstnceIn", instnceIn) :
                new ObjectParameter("InstnceIn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RGSp_UpdateLicense", computerNameParameter, instnceInParameter);
        }
    
        public virtual int TmSp_AddCompanyToReadOnlyDBUser(string userName, string common_DBName, string newDb)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var common_DBNameParameter = common_DBName != null ?
                new ObjectParameter("Common_DBName", common_DBName) :
                new ObjectParameter("Common_DBName", typeof(string));
    
            var newDbParameter = newDb != null ?
                new ObjectParameter("NewDb", newDb) :
                new ObjectParameter("NewDb", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_AddCompanyToReadOnlyDBUser", userNameParameter, common_DBNameParameter, newDbParameter);
        }
    
        public virtual ObjectResult<string> TmSp_AliasUpdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TmSp_AliasUpdate");
        }
    
        public virtual int TmSP_CheckDiskSpace()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSP_CheckDiskSpace");
        }
    
        public virtual int TmSp_CopyCompany(string source_company_name, string new_company_name)
        {
            var source_company_nameParameter = source_company_name != null ?
                new ObjectParameter("source_company_name", source_company_name) :
                new ObjectParameter("source_company_name", typeof(string));
    
            var new_company_nameParameter = new_company_name != null ?
                new ObjectParameter("new_company_name", new_company_name) :
                new ObjectParameter("new_company_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_CopyCompany", source_company_nameParameter, new_company_nameParameter);
        }
    
        public virtual int TmSp_FindArchivedCompany(string guid)
        {
            var guidParameter = guid != null ?
                new ObjectParameter("guid", guid) :
                new ObjectParameter("guid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_FindArchivedCompany", guidParameter);
        }
    
        public virtual int TmSp_GetCompList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetCompList");
        }
    
        public virtual int TmSP_GetDbSizeByDrives(string dBF, string dBFileName)
        {
            var dBFParameter = dBF != null ?
                new ObjectParameter("DBF", dBF) :
                new ObjectParameter("DBF", typeof(string));
    
            var dBFileNameParameter = dBFileName != null ?
                new ObjectParameter("DBFileName", dBFileName) :
                new ObjectParameter("DBFileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSP_GetDbSizeByDrives", dBFParameter, dBFileNameParameter);
        }
    
        public virtual ObjectResult<string> TmSp_GetHelpPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TmSp_GetHelpPath");
        }
    
        public virtual ObjectResult<TmSp_GetServerTime_Result> TmSp_GetServerTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TmSp_GetServerTime_Result>("TmSp_GetServerTime");
        }
    
        public virtual int TmSp_GetUsers(string dbName, Nullable<int> procID)
        {
            var dbNameParameter = dbName != null ?
                new ObjectParameter("dbName", dbName) :
                new ObjectParameter("dbName", typeof(string));
    
            var procIDParameter = procID.HasValue ?
                new ObjectParameter("ProcID", procID) :
                new ObjectParameter("ProcID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_GetUsers", dbNameParameter, procIDParameter);
        }
    
        public virtual int TmSp_Installer_ClearTable(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Installer_ClearTable", tableParameter);
        }
    
        public virtual int TmSp_Installer_CreateTmSp(string encStr, string spName)
        {
            var encStrParameter = encStr != null ?
                new ObjectParameter("encStr", encStr) :
                new ObjectParameter("encStr", typeof(string));
    
            var spNameParameter = spName != null ?
                new ObjectParameter("spName", spName) :
                new ObjectParameter("spName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Installer_CreateTmSp", encStrParameter, spNameParameter);
        }
    
        public virtual int TmSp_Installer_SetFieldValue(string table, string field, string value)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Installer_SetFieldValue", tableParameter, fieldParameter, valueParameter);
        }
    
        public virtual int TmSp_RefreshCompList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_RefreshCompList");
        }
    
        public virtual int TmSp_Update_SARI(string nameSpace, string pName, string aName)
        {
            var nameSpaceParameter = nameSpace != null ?
                new ObjectParameter("nameSpace", nameSpace) :
                new ObjectParameter("nameSpace", typeof(string));
    
            var pNameParameter = pName != null ?
                new ObjectParameter("pName", pName) :
                new ObjectParameter("pName", typeof(string));
    
            var aNameParameter = aName != null ?
                new ObjectParameter("aName", aName) :
                new ObjectParameter("aName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Update_SARI", nameSpaceParameter, pNameParameter, aNameParameter);
        }
    
        public virtual int TmSp_Update_SFMD(string fromVersion, string clusterID, string patchLevel)
        {
            var fromVersionParameter = fromVersion != null ?
                new ObjectParameter("fromVersion", fromVersion) :
                new ObjectParameter("fromVersion", typeof(string));
    
            var clusterIDParameter = clusterID != null ?
                new ObjectParameter("clusterID", clusterID) :
                new ObjectParameter("clusterID", typeof(string));
    
            var patchLevelParameter = patchLevel != null ?
                new ObjectParameter("patchLevel", patchLevel) :
                new ObjectParameter("patchLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TmSp_Update_SFMD", fromVersionParameter, clusterIDParameter, patchLevelParameter);
        }
    
        public virtual int UpdateClassDef(Nullable<int> classid, string name, string description)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClassDef", classidParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int UpdateEnumType(Nullable<int> enumid, string name, Nullable<int> type)
        {
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEnumType", enumidParameter, nameParameter, typeParameter);
        }
    
        public virtual int UpdateMetaObject(Nullable<int> objid, Nullable<int> classid, string name, string description, string access, string searchstring)
        {
            var objidParameter = objid.HasValue ?
                new ObjectParameter("objid", objid) :
                new ObjectParameter("objid", typeof(int));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var accessParameter = access != null ?
                new ObjectParameter("access", access) :
                new ObjectParameter("access", typeof(string));
    
            var searchstringParameter = searchstring != null ?
                new ObjectParameter("searchstring", searchstring) :
                new ObjectParameter("searchstring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMetaObject", objidParameter, classidParameter, nameParameter, descriptionParameter, accessParameter, searchstringParameter);
        }
    
        public virtual int UpdateMetaProperty(Nullable<int> propid, Nullable<int> ivalue, Nullable<double> fvalue, string cvalue)
        {
            var propidParameter = propid.HasValue ?
                new ObjectParameter("propid", propid) :
                new ObjectParameter("propid", typeof(int));
    
            var ivalueParameter = ivalue.HasValue ?
                new ObjectParameter("ivalue", ivalue) :
                new ObjectParameter("ivalue", typeof(int));
    
            var fvalueParameter = fvalue.HasValue ?
                new ObjectParameter("fvalue", fvalue) :
                new ObjectParameter("fvalue", typeof(double));
    
            var cvalueParameter = cvalue != null ?
                new ObjectParameter("cvalue", cvalue) :
                new ObjectParameter("cvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMetaProperty", propidParameter, ivalueParameter, fvalueParameter, cvalueParameter);
        }
    
        public virtual int UpdateMetaRelationSeqNo(Nullable<int> objidfrom, Nullable<int> propdefid, Nullable<int> oldseqno, ObjectParameter newseqno)
        {
            var objidfromParameter = objidfrom.HasValue ?
                new ObjectParameter("objidfrom", objidfrom) :
                new ObjectParameter("objidfrom", typeof(int));
    
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var oldseqnoParameter = oldseqno.HasValue ?
                new ObjectParameter("oldseqno", oldseqno) :
                new ObjectParameter("oldseqno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMetaRelationSeqNo", objidfromParameter, propdefidParameter, oldseqnoParameter, newseqno);
        }
    
        public virtual int UpdatePropertyDef(Nullable<int> propdefid, Nullable<int> classid, Nullable<int> seqno, string name, string description, Nullable<int> type, Nullable<int> classrefid, Nullable<int> enumid)
        {
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            var seqnoParameter = seqno.HasValue ?
                new ObjectParameter("seqno", seqno) :
                new ObjectParameter("seqno", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var classrefidParameter = classrefid.HasValue ?
                new ObjectParameter("classrefid", classrefid) :
                new ObjectParameter("classrefid", typeof(int));
    
            var enumidParameter = enumid.HasValue ?
                new ObjectParameter("enumid", enumid) :
                new ObjectParameter("enumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePropertyDef", propdefidParameter, classidParameter, seqnoParameter, nameParameter, descriptionParameter, typeParameter, classrefidParameter, enumidParameter);
        }
    
        public virtual int UpdatePropertyDefSeqNo(Nullable<int> propdefid, Nullable<int> seqnoin, ObjectParameter seqnoout)
        {
            var propdefidParameter = propdefid.HasValue ?
                new ObjectParameter("propdefid", propdefid) :
                new ObjectParameter("propdefid", typeof(int));
    
            var seqnoinParameter = seqnoin.HasValue ?
                new ObjectParameter("seqnoin", seqnoin) :
                new ObjectParameter("seqnoin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePropertyDefSeqNo", propdefidParameter, seqnoinParameter, seqnoout);
        }
    }
}
